/* Generated by Yosys 0.23+10 (git sha1 b6467f080, gcc 11.3.0-1ubuntu1~22.04 -fPIC -Os) */

module \$paramod$133d3f57beb194671de85e41c36ac7957adf3ca1\fpnew_opgroup_block_A94B6_B7406 (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, op_mod_i, src_fmt_i, dst_fmt_i, int_fmt_i, vectorial_op_i, tag_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, tag_o, out_valid_o, out_ready_i
, busy_o);
  wire _0_;
  wire [23:0] arbiter_output;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  input [2:0] dst_fmt_i;
  wire [2:0] dst_fmt_i;
  output extension_bit_o;
  wire extension_bit_o;
  input flush_i;
  wire flush_i;
  wire [4:0] fmt_busy;
  wire [4:0] fmt_in_ready;
  wire [4:0] fmt_out_ready;
  wire [4:0] fmt_out_valid;
  wire [119:0] fmt_outputs;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [1:0] int_fmt_i;
  wire [1:0] int_fmt_i;
  input [14:0] is_boxed_i;
  wire [14:0] is_boxed_i;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [47:0] operands_i;
  wire [47:0] operands_i;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  output [15:0] result_o;
  wire [15:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  input [2:0] src_fmt_i;
  wire [2:0] src_fmt_i;
  output [4:0] status_o;
  wire [4:0] status_o;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  input vectorial_op_i;
  wire vectorial_op_i;
  assign in_ready_o = in_valid_i & _0_;
  wire [4:0] _3_ = 5'h00;
  assign _0_ = _3_[dst_fmt_i +: 1];
  \$paramod$ea0afc4617438da89f766dca3e2e990528ae0bae\rr_arb_tree_52163_F264E  i_arbiter (
    .clk_i(clk_i),
    .data_i(120'hfffffdfffffdfffffdfffffdfffffd),
    .data_o(arbiter_output),
    .flush_i(flush_i),
    .gnt_i(out_ready_i),
    .gnt_o(fmt_out_ready),
    .req_i(5'h00),
    .req_o(out_valid_o),
    .rr_i(3'h0),
    .rst_ni(rst_ni)
  );
  assign busy_o = 1'h0;
  assign extension_bit_o = arbiter_output[2];
  assign fmt_busy = 5'h00;
  assign fmt_in_ready = 5'h00;
  assign fmt_out_valid = 5'h00;
  assign fmt_outputs = 120'hfffffdfffffdfffffdfffffdfffffd;
  assign result_o = arbiter_output[23:8];
  assign status_o = arbiter_output[7:3];
  assign tag_o = arbiter_output[1:0];
endmodule

module \$paramod$2f2717b41d3d9c8c568e6c272ff3e39c1b6095e7\fpnew_top_21317_11D0A (clk_i, rst_ni, operands_i, rnd_mode_i, op_i, op_mod_i, src_fmt_i, dst_fmt_i, int_fmt_i, vectorial_op_i, tag_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, tag_o, out_valid_o, out_ready_i, busy_o);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire [22:0] arbiter_output;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  input [2:0] dst_fmt_i;
  wire [2:0] dst_fmt_i;
  input flush_i;
  wire flush_i;
  wire [3:0] \fpnew_pkg_get_opgroup$func$FPNewBlackbox_H1l0s.preprocessed.v:7883$195.op ;
  wire [1:0] \fpnew_pkg_get_opgroup$func$FPNewBlackbox_H1l0s.preprocessed.v:7883$41.$result ;
  wire [1:0] \fpnew_pkg_get_opgroup$func$FPNewBlackbox_H1l0s.preprocessed.v:7932$127.$result ;
  wire [1:0] \fpnew_pkg_get_opgroup$func$FPNewBlackbox_H1l0s.preprocessed.v:7932$162.$result ;
  wire [3:0] \fpnew_pkg_get_opgroup$func$FPNewBlackbox_H1l0s.preprocessed.v:7932$211.op ;
  wire [3:0] \fpnew_pkg_get_opgroup$func$FPNewBlackbox_H1l0s.preprocessed.v:7932$227.op ;
  wire [3:0] \fpnew_pkg_get_opgroup$func$FPNewBlackbox_H1l0s.preprocessed.v:7932$243.op ;
  wire [3:0] \fpnew_pkg_get_opgroup$func$FPNewBlackbox_H1l0s.preprocessed.v:7932$259.op ;
  wire [1:0] \fpnew_pkg_get_opgroup$func$FPNewBlackbox_H1l0s.preprocessed.v:7932$57.$result ;
  wire [1:0] \fpnew_pkg_get_opgroup$func$FPNewBlackbox_H1l0s.preprocessed.v:7932$92.$result ;
  wire \gen_operation_groups[0].in_valid ;
  wire [14:0] \gen_operation_groups[0].input_boxed ;
  wire [31:0] \gen_operation_groups[0].slice_inputs.sv2v_autoblock_1.fmt ;
  wire \gen_operation_groups[1].in_valid ;
  wire [9:0] \gen_operation_groups[1].input_boxed ;
  wire [31:0] \gen_operation_groups[1].slice_inputs.sv2v_autoblock_1.fmt ;
  wire \gen_operation_groups[2].in_valid ;
  wire [9:0] \gen_operation_groups[2].input_boxed ;
  wire [31:0] \gen_operation_groups[2].slice_inputs.sv2v_autoblock_1.fmt ;
  wire \gen_operation_groups[3].in_valid ;
  wire [14:0] \gen_operation_groups[3].input_boxed ;
  wire [31:0] \gen_operation_groups[3].slice_inputs.sv2v_autoblock_1.fmt ;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [1:0] int_fmt_i;
  wire [1:0] int_fmt_i;
  wire [14:0] is_boxed;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [47:0] operands_i;
  wire [47:0] operands_i;
  wire [3:0] opgrp_busy;
  wire [3:0] opgrp_ext;
  wire [3:0] opgrp_in_ready;
  wire [3:0] opgrp_out_ready;
  wire [3:0] opgrp_out_valid;
  wire [91:0] opgrp_outputs;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  output [15:0] result_o;
  wire [15:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  input [2:0] src_fmt_i;
  wire [2:0] src_fmt_i;
  output [4:0] status_o;
  wire [4:0] status_o;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  input vectorial_op_i;
  wire vectorial_op_i;
  reg [1:0] \$auto$proc_rom.cc:150:do_switch$1071  [15:0];
  initial begin
    \$auto$proc_rom.cc:150:do_switch$1071 [0] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1071 [1] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1071 [2] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1071 [3] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1071 [4] = 2'h1;
    \$auto$proc_rom.cc:150:do_switch$1071 [5] = 2'h1;
    \$auto$proc_rom.cc:150:do_switch$1071 [6] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1071 [7] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1071 [8] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1071 [9] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1071 [10] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1071 [11] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1071 [12] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1071 [13] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1071 [14] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1071 [15] = 2'h2;
  end
  assign \fpnew_pkg_get_opgroup$func$FPNewBlackbox_H1l0s.preprocessed.v:7932$162.$result  = \$auto$proc_rom.cc:150:do_switch$1071 [op_i];
  reg [1:0] \$auto$proc_rom.cc:150:do_switch$1075  [15:0];
  initial begin
    \$auto$proc_rom.cc:150:do_switch$1075 [0] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1075 [1] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1075 [2] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1075 [3] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1075 [4] = 2'h1;
    \$auto$proc_rom.cc:150:do_switch$1075 [5] = 2'h1;
    \$auto$proc_rom.cc:150:do_switch$1075 [6] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1075 [7] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1075 [8] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1075 [9] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1075 [10] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1075 [11] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1075 [12] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1075 [13] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1075 [14] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1075 [15] = 2'h2;
  end
  assign \fpnew_pkg_get_opgroup$func$FPNewBlackbox_H1l0s.preprocessed.v:7932$127.$result  = \$auto$proc_rom.cc:150:do_switch$1075 [op_i];
  reg [1:0] \$auto$proc_rom.cc:150:do_switch$1079  [15:0];
  initial begin
    \$auto$proc_rom.cc:150:do_switch$1079 [0] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1079 [1] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1079 [2] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1079 [3] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1079 [4] = 2'h1;
    \$auto$proc_rom.cc:150:do_switch$1079 [5] = 2'h1;
    \$auto$proc_rom.cc:150:do_switch$1079 [6] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1079 [7] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1079 [8] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1079 [9] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1079 [10] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1079 [11] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1079 [12] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1079 [13] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1079 [14] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1079 [15] = 2'h2;
  end
  assign \fpnew_pkg_get_opgroup$func$FPNewBlackbox_H1l0s.preprocessed.v:7932$92.$result  = \$auto$proc_rom.cc:150:do_switch$1079 [op_i];
  reg [1:0] \$auto$proc_rom.cc:150:do_switch$1083  [15:0];
  initial begin
    \$auto$proc_rom.cc:150:do_switch$1083 [0] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1083 [1] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1083 [2] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1083 [3] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1083 [4] = 2'h1;
    \$auto$proc_rom.cc:150:do_switch$1083 [5] = 2'h1;
    \$auto$proc_rom.cc:150:do_switch$1083 [6] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1083 [7] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1083 [8] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1083 [9] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1083 [10] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1083 [11] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1083 [12] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1083 [13] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1083 [14] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1083 [15] = 2'h2;
  end
  assign \fpnew_pkg_get_opgroup$func$FPNewBlackbox_H1l0s.preprocessed.v:7932$57.$result  = \$auto$proc_rom.cc:150:do_switch$1083 [op_i];
  reg [1:0] \$auto$proc_rom.cc:150:do_switch$1087  [15:0];
  initial begin
    \$auto$proc_rom.cc:150:do_switch$1087 [0] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1087 [1] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1087 [2] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1087 [3] = 2'h0;
    \$auto$proc_rom.cc:150:do_switch$1087 [4] = 2'h1;
    \$auto$proc_rom.cc:150:do_switch$1087 [5] = 2'h1;
    \$auto$proc_rom.cc:150:do_switch$1087 [6] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1087 [7] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1087 [8] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1087 [9] = 2'h2;
    \$auto$proc_rom.cc:150:do_switch$1087 [10] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1087 [11] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1087 [12] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1087 [13] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1087 [14] = 2'h3;
    \$auto$proc_rom.cc:150:do_switch$1087 [15] = 2'h2;
  end
  assign \fpnew_pkg_get_opgroup$func$FPNewBlackbox_H1l0s.preprocessed.v:7883$41.$result  = \$auto$proc_rom.cc:150:do_switch$1087 [op_i];
  assign in_ready_o = in_valid_i & _07_;
  assign \gen_operation_groups[0].in_valid  = in_valid_i & _03_;
  assign \gen_operation_groups[1].in_valid  = in_valid_i & _04_;
  assign \gen_operation_groups[2].in_valid  = in_valid_i & _05_;
  assign \gen_operation_groups[3].in_valid  = in_valid_i & _06_;
  assign _00_ = operands_i[15:8] == 8'hff;
  assign _01_ = operands_i[31:24] == 8'hff;
  assign _02_ = operands_i[47:40] == 8'hff;
  assign _03_ = ! \fpnew_pkg_get_opgroup$func$FPNewBlackbox_H1l0s.preprocessed.v:7932$57.$result ;
  assign _04_ = \fpnew_pkg_get_opgroup$func$FPNewBlackbox_H1l0s.preprocessed.v:7932$92.$result  == 2'h1;
  assign _05_ = \fpnew_pkg_get_opgroup$func$FPNewBlackbox_H1l0s.preprocessed.v:7932$127.$result  == 2'h2;
  assign _06_ = \fpnew_pkg_get_opgroup$func$FPNewBlackbox_H1l0s.preprocessed.v:7932$162.$result  == 2'h3;
  assign busy_o = | opgrp_busy;
  wire [3:0] _35_ = opgrp_in_ready;
  assign _07_ = _35_[\fpnew_pkg_get_opgroup$func$FPNewBlackbox_H1l0s.preprocessed.v:7883$41.$result  +: 1];
  assign \gen_operation_groups[0].input_boxed [9] = vectorial_op_i ? 1'h1 : _00_;
  assign \gen_operation_groups[0].input_boxed [10] = vectorial_op_i ? 1'h1 : _01_;
  assign \gen_operation_groups[0].input_boxed [11] = vectorial_op_i ? 1'h1 : _02_;
  \$paramod$7ec12dc1c1fb40e590244529b0a1c1961e76ed61\fpnew_opgroup_block_A94B6_B7406  \gen_operation_groups[0].i_opgroup_block  (
    .busy_o(opgrp_busy[0]),
    .clk_i(clk_i),
    .dst_fmt_i(dst_fmt_i),
    .extension_bit_o(opgrp_ext[0]),
    .flush_i(flush_i),
    .in_ready_o(opgrp_in_ready[0]),
    .in_valid_i(\gen_operation_groups[0].in_valid ),
    .int_fmt_i(int_fmt_i),
    .is_boxed_i({ 3'h7, \gen_operation_groups[0].input_boxed [11:9], 9'h1ff }),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(operands_i),
    .out_ready_i(opgrp_out_ready[0]),
    .out_valid_o(opgrp_out_valid[0]),
    .result_o(opgrp_outputs[22:7]),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .src_fmt_i(src_fmt_i),
    .status_o(opgrp_outputs[6:2]),
    .tag_i(tag_i),
    .tag_o(opgrp_outputs[1:0]),
    .vectorial_op_i(vectorial_op_i)
  );
  \$paramod$3c73bc48fa5d4621f71d597ff6386b3bd7929b0b\fpnew_opgroup_block_A94B6_B7406  \gen_operation_groups[1].i_opgroup_block  (
    .busy_o(opgrp_busy[1]),
    .clk_i(clk_i),
    .dst_fmt_i(dst_fmt_i),
    .extension_bit_o(opgrp_ext[1]),
    .flush_i(flush_i),
    .in_ready_o(opgrp_in_ready[1]),
    .in_valid_i(\gen_operation_groups[1].in_valid ),
    .int_fmt_i(int_fmt_i),
    .is_boxed_i({ 2'h3, \gen_operation_groups[0].input_boxed [10:9], 6'h3f }),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(operands_i[31:0]),
    .out_ready_i(opgrp_out_ready[1]),
    .out_valid_o(opgrp_out_valid[1]),
    .result_o(opgrp_outputs[45:30]),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .src_fmt_i(src_fmt_i),
    .status_o(opgrp_outputs[29:25]),
    .tag_i(tag_i),
    .tag_o(opgrp_outputs[24:23]),
    .vectorial_op_i(vectorial_op_i)
  );
  \$paramod$d25e8f5a7a010abd03c26d8d770bf8e13939c78e\fpnew_opgroup_block_A94B6_B7406  \gen_operation_groups[2].i_opgroup_block  (
    .busy_o(opgrp_busy[2]),
    .clk_i(clk_i),
    .dst_fmt_i(dst_fmt_i),
    .extension_bit_o(opgrp_ext[2]),
    .flush_i(flush_i),
    .in_ready_o(opgrp_in_ready[2]),
    .in_valid_i(\gen_operation_groups[2].in_valid ),
    .int_fmt_i(int_fmt_i),
    .is_boxed_i({ 2'h3, \gen_operation_groups[0].input_boxed [10:9], 6'h3f }),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(operands_i[31:0]),
    .out_ready_i(opgrp_out_ready[2]),
    .out_valid_o(opgrp_out_valid[2]),
    .result_o(opgrp_outputs[68:53]),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .src_fmt_i(src_fmt_i),
    .status_o(opgrp_outputs[52:48]),
    .tag_i(tag_i),
    .tag_o(opgrp_outputs[47:46]),
    .vectorial_op_i(vectorial_op_i)
  );
  \$paramod$133d3f57beb194671de85e41c36ac7957adf3ca1\fpnew_opgroup_block_A94B6_B7406  \gen_operation_groups[3].i_opgroup_block  (
    .busy_o(opgrp_busy[3]),
    .clk_i(clk_i),
    .dst_fmt_i(dst_fmt_i),
    .extension_bit_o(opgrp_ext[3]),
    .flush_i(flush_i),
    .in_ready_o(opgrp_in_ready[3]),
    .in_valid_i(\gen_operation_groups[3].in_valid ),
    .int_fmt_i(int_fmt_i),
    .is_boxed_i({ 3'h7, \gen_operation_groups[0].input_boxed [11:9], 9'h1ff }),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(operands_i),
    .out_ready_i(opgrp_out_ready[3]),
    .out_valid_o(opgrp_out_valid[3]),
    .result_o(opgrp_outputs[91:76]),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .src_fmt_i(src_fmt_i),
    .status_o(opgrp_outputs[75:71]),
    .tag_i(tag_i),
    .tag_o(opgrp_outputs[70:69]),
    .vectorial_op_i(vectorial_op_i)
  );
  \$paramod$447df5b3a283065710c022398bea8ef33f939a95\rr_arb_tree_DE4E6_76EE6  i_arbiter (
    .clk_i(clk_i),
    .data_i(opgrp_outputs),
    .data_o(arbiter_output),
    .flush_i(flush_i),
    .gnt_i(out_ready_i),
    .gnt_o(opgrp_out_ready),
    .req_i(opgrp_out_valid),
    .req_o(out_valid_o),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign \fpnew_pkg_get_opgroup$func$FPNewBlackbox_H1l0s.preprocessed.v:7883$195.op  = 4'hx;
  assign \fpnew_pkg_get_opgroup$func$FPNewBlackbox_H1l0s.preprocessed.v:7932$211.op  = 4'hx;
  assign \fpnew_pkg_get_opgroup$func$FPNewBlackbox_H1l0s.preprocessed.v:7932$227.op  = 4'hx;
  assign \fpnew_pkg_get_opgroup$func$FPNewBlackbox_H1l0s.preprocessed.v:7932$243.op  = 4'hx;
  assign \fpnew_pkg_get_opgroup$func$FPNewBlackbox_H1l0s.preprocessed.v:7932$259.op  = 4'hx;
  assign { \gen_operation_groups[0].input_boxed [14:12], \gen_operation_groups[0].input_boxed [8:0] } = 12'hfff;
  assign \gen_operation_groups[0].slice_inputs.sv2v_autoblock_1.fmt  = 32'd5;
  assign \gen_operation_groups[1].input_boxed  = { 2'h3, \gen_operation_groups[0].input_boxed [10:9], 6'h3f };
  assign \gen_operation_groups[1].slice_inputs.sv2v_autoblock_1.fmt  = 32'd5;
  assign \gen_operation_groups[2].input_boxed  = { 2'h3, \gen_operation_groups[0].input_boxed [10:9], 6'h3f };
  assign \gen_operation_groups[2].slice_inputs.sv2v_autoblock_1.fmt  = 32'd5;
  assign \gen_operation_groups[3].input_boxed  = { 3'h7, \gen_operation_groups[0].input_boxed [11:9], 9'h1ff };
  assign \gen_operation_groups[3].slice_inputs.sv2v_autoblock_1.fmt  = 32'd5;
  assign is_boxed = { 3'h7, \gen_operation_groups[0].input_boxed [11:9], 9'h1ff };
  assign result_o = arbiter_output[22:7];
  assign status_o = arbiter_output[6:2];
  assign tag_o = arbiter_output[1:0];
endmodule

module \$paramod$3c73bc48fa5d4621f71d597ff6386b3bd7929b0b\fpnew_opgroup_block_A94B6_B7406 (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, op_mod_i, src_fmt_i, dst_fmt_i, int_fmt_i, vectorial_op_i, tag_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, tag_o, out_valid_o, out_ready_i
, busy_o);
  wire _0_;
  wire [23:0] arbiter_output;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  input [2:0] dst_fmt_i;
  wire [2:0] dst_fmt_i;
  output extension_bit_o;
  wire extension_bit_o;
  input flush_i;
  wire flush_i;
  wire [4:0] fmt_busy;
  wire [4:0] fmt_in_ready;
  wire [4:0] fmt_out_ready;
  wire [4:0] fmt_out_valid;
  wire [119:0] fmt_outputs;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [1:0] int_fmt_i;
  wire [1:0] int_fmt_i;
  input [9:0] is_boxed_i;
  wire [9:0] is_boxed_i;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [31:0] operands_i;
  wire [31:0] operands_i;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  output [15:0] result_o;
  wire [15:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  input [2:0] src_fmt_i;
  wire [2:0] src_fmt_i;
  output [4:0] status_o;
  wire [4:0] status_o;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  input vectorial_op_i;
  wire vectorial_op_i;
  assign in_ready_o = in_valid_i & _0_;
  wire [4:0] _3_ = 5'h00;
  assign _0_ = _3_[dst_fmt_i +: 1];
  \$paramod$ea0afc4617438da89f766dca3e2e990528ae0bae\rr_arb_tree_52163_F264E  i_arbiter (
    .clk_i(clk_i),
    .data_i(120'hfffffdfffffdfffffdfffffdfffffd),
    .data_o(arbiter_output),
    .flush_i(flush_i),
    .gnt_i(out_ready_i),
    .gnt_o(fmt_out_ready),
    .req_i(5'h00),
    .req_o(out_valid_o),
    .rr_i(3'h0),
    .rst_ni(rst_ni)
  );
  assign busy_o = 1'h0;
  assign extension_bit_o = arbiter_output[2];
  assign fmt_busy = 5'h00;
  assign fmt_in_ready = 5'h00;
  assign fmt_out_valid = 5'h00;
  assign fmt_outputs = 120'hfffffdfffffdfffffdfffffdfffffd;
  assign result_o = arbiter_output[23:8];
  assign status_o = arbiter_output[7:3];
  assign tag_o = arbiter_output[1:0];
endmodule

module \$paramod$447df5b3a283065710c022398bea8ef33f939a95\rr_arb_tree_DE4E6_76EE6 (clk_i, rst_ni, flush_i, rr_i, req_i, gnt_o, data_i, req_o, gnt_i, data_o, idx_o);
  wire [1:0] _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  input clk_i;
  wire clk_i;
  input [91:0] data_i;
  wire [91:0] data_i;
  output [22:0] data_o;
  wire [22:0] data_o;
  input flush_i;
  wire flush_i;
  wire [68:0] \gen_arbiter.data_nodes ;
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  wire [1:0] \gen_arbiter.gen_int_rr.rr_d ;
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  wire [2:0] \gen_arbiter.gnt_nodes ;
  wire [5:0] \gen_arbiter.index_nodes ;
  wire [3:0] \gen_arbiter.req_d ;
  wire [2:0] \gen_arbiter.req_nodes ;
  reg [1:0] \gen_arbiter.rr_q ;
  input gnt_i;
  wire gnt_i;
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  output [1:0] idx_o;
  wire [1:0] idx_o;
  input [3:0] req_i;
  wire [3:0] req_i;
  output req_o;
  wire req_o;
  input [1:0] rr_i;
  wire [1:0] rr_i;
  input rst_ni;
  wire rst_ni;
  wire [1:0] \sv2v_cast_29535$func$FPNewBlackbox_H1l0s.preprocessed.v:327$436.inp ;
  wire [1:0] \sv2v_cast_29535$func$FPNewBlackbox_H1l0s.preprocessed.v:327$437.inp ;
  wire [1:0] \sv2v_cast_29535$func$FPNewBlackbox_H1l0s.preprocessed.v:347$434.inp ;
  wire [1:0] \sv2v_cast_29535$func$FPNewBlackbox_H1l0s.preprocessed.v:347$435.inp ;
  assign _01_ = req_i[1] & \gen_arbiter.rr_q [0];
  assign _02_ = req_i[3] & \gen_arbiter.rr_q [0];
  assign gnt_o[0] = \gen_arbiter.gnt_nodes [1] & _16_;
  assign gnt_o[2] = \gen_arbiter.gnt_nodes [2] & _17_;
  assign gnt_o[1] = \gen_arbiter.gnt_nodes [1] & \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign gnt_o[3] = \gen_arbiter.gnt_nodes [2] & \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  assign _03_ = \gen_arbiter.req_nodes [2] & \gen_arbiter.rr_q [1];
  assign \gen_arbiter.gnt_nodes [1] = gnt_i & _19_;
  assign \gen_arbiter.gnt_nodes [2] = gnt_i & \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.rr_q  <= 2'h0;
    else if (_04_) \gen_arbiter.rr_q  <= _00_;
  assign _04_ = | { _13_, flush_i };
  assign _05_ = 32'd0 > \gen_arbiter.rr_q ;
  assign _06_ = 32'd1 > \gen_arbiter.rr_q ;
  assign _07_ = 32'd2 > \gen_arbiter.rr_q ;
  assign _08_ = 32'd3 > \gen_arbiter.rr_q ;
  assign _09_ = 32'd0 <= \gen_arbiter.rr_q ;
  assign _10_ = 32'd1 <= \gen_arbiter.rr_q ;
  assign _11_ = 32'd2 <= \gen_arbiter.rr_q ;
  assign _12_ = 32'd3 <= \gen_arbiter.rr_q ;
  assign _13_ = gnt_i && req_o;
  assign _14_ = ~ req_i[0];
  assign _15_ = ~ req_i[2];
  assign _16_ = ~ \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign _17_ = ~ \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  assign _18_ = ~ \gen_arbiter.req_nodes [1];
  assign _19_ = ~ \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [1] = req_i[0] | req_i[1];
  assign \gen_arbiter.req_nodes [2] = req_i[2] | req_i[3];
  assign \gen_arbiter.gen_levels[1].gen_level[0].sel  = _14_ | _01_;
  assign \gen_arbiter.gen_levels[1].gen_level[1].sel  = _15_ | _02_;
  assign req_o = \gen_arbiter.req_nodes [1] | \gen_arbiter.req_nodes [2];
  assign \gen_arbiter.gen_levels[0].gen_level[0].sel  = _18_ | _03_;
  assign _00_ = flush_i ? 2'h0 : \gen_arbiter.gen_int_rr.rr_d ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = _05_ ? req_i[0] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1] = _06_ ? req_i[1] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2] = _07_ ? req_i[2] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3] = _08_ ? req_i[3] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = _09_ ? req_i[0] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1] = _10_ ? req_i[1] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2] = _11_ ? req_i[2] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3] = _12_ ? req_i[3] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  = \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty  ? \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx  : \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  assign \gen_arbiter.gen_int_rr.rr_d  = _13_ ? \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  : 2'hx;
  assign \gen_arbiter.data_nodes [45:23] = \gen_arbiter.gen_levels[1].gen_level[0].sel  ? data_i[45:23] : data_i[22:0];
  assign \gen_arbiter.data_nodes [68:46] = \gen_arbiter.gen_levels[1].gen_level[1].sel  ? data_i[91:69] : data_i[68:46];
  assign idx_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? { 1'h1, \gen_arbiter.gen_levels[1].gen_level[1].sel  } : { 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  };
  assign data_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? \gen_arbiter.data_nodes [68:46] : \gen_arbiter.data_nodes [45:23];
  \$paramod\lzc\WIDTH=32'00000000000000000000000000000100\MODE=1'0  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask )
  );
  \$paramod\lzc\WIDTH=32'00000000000000000000000000000100\MODE=1'0  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask )
  );
  assign \gen_arbiter.data_nodes [22:0] = data_o;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.index_nodes  = { 1'h0, \gen_arbiter.gen_levels[1].gen_level[1].sel , 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel , idx_o };
  assign \gen_arbiter.req_d  = req_i;
  assign \gen_arbiter.req_nodes [0] = req_o;
  assign \sv2v_cast_29535$func$FPNewBlackbox_H1l0s.preprocessed.v:327$436.inp  = 2'hx;
  assign \sv2v_cast_29535$func$FPNewBlackbox_H1l0s.preprocessed.v:327$437.inp  = 2'hx;
  assign \sv2v_cast_29535$func$FPNewBlackbox_H1l0s.preprocessed.v:347$434.inp  = 2'hx;
  assign \sv2v_cast_29535$func$FPNewBlackbox_H1l0s.preprocessed.v:347$435.inp  = 2'hx;
endmodule

module \$paramod$4a8ac12f2940303fa2e2f18742ec0f9714062a4c\fpnew_fma_FC83A_5615B (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, op_mod_i, tag_i, aux_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, tag_o, aux_o, out_valid_o, out_ready_i, busy_o);
  wire [5:0] _000_;
  wire [6:0] _001_;
  wire [11:0] _002_;
  wire [5:0] _003_;
  wire [6:0] _004_;
  wire _005_;
  wire [15:0] _006_;
  wire _007_;
  wire [24:0] _008_;
  wire [6:0] _009_;
  wire [11:0] _010_;
  wire _011_;
  wire [15:0] _012_;
  wire _013_;
  wire [24:0] _014_;
  wire [15:0] _015_;
  wire _016_;
  wire [15:0] _017_;
  wire [15:0] _018_;
  wire [31:0] _019_;
  wire [31:0] _020_;
  wire [31:0] _021_;
  wire [37:0] _022_;
  wire [31:0] _023_;
  wire [31:0] _024_;
  wire [31:0] _025_;
  wire [31:0] _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire [37:0] _052_;
  wire _053_;
  wire _054_;
  wire [36:0] _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire [31:0] _065_;
  wire [31:0] _066_;
  wire [31:0] _067_;
  wire [31:0] _068_;
  wire [31:0] _069_;
  wire [37:0] _070_;
  wire _071_;
  wire [31:0] _072_;
  wire _073_;
  wire [36:0] addend_after_shift;
  wire [5:0] addend_shamt;
  wire [5:0] addend_shamt_q;
  wire [36:0] addend_shifted;
  wire [10:0] addend_sticky_bits;
  wire any_operand_inf;
  wire any_operand_nan;
  input aux_i;
  wire aux_i;
  output aux_o;
  wire aux_o;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  wire effective_subtraction;
  wire effective_subtraction_q;
  wire [6:0] exponent_a;
  wire [6:0] exponent_addend;
  wire [6:0] exponent_b;
  wire [6:0] exponent_c;
  wire [6:0] exponent_difference;
  wire [6:0] exponent_difference_q;
  wire [6:0] exponent_product;
  wire [6:0] exponent_product_q;
  output extension_bit_o;
  wire extension_bit_o;
  wire [6:0] final_exponent;
  wire [11:0] final_mantissa;
  wire final_sign;
  wire final_sign_q;
  input flush_i;
  wire flush_i;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  wire [7:0] info_a;
  wire [7:0] info_b;
  wire [7:0] info_c;
  wire [23:0] info_q;
  wire inject_carry_in;
  wire inp_pipe_aux_q;
  wire [2:0] inp_pipe_is_boxed_q;
  wire inp_pipe_op_mod_q;
  wire [3:0] inp_pipe_op_q;
  wire [47:0] inp_pipe_operands_q;
  wire inp_pipe_ready;
  wire [2:0] inp_pipe_rnd_mode_q;
  wire [1:0] inp_pipe_tag_q;
  wire inp_pipe_valid_q;
  input [2:0] is_boxed_i;
  wire [2:0] is_boxed_i;
  wire [4:0] leading_zero_count;
  wire [5:0] leading_zero_count_sgn;
  wire lzc_zeroes;
  wire [10:0] mantissa_a;
  wire [10:0] mantissa_b;
  wire [10:0] mantissa_c;
  wire [5:0] mid_pipe_add_shamt_q;
  wire mid_pipe_aux_q;
  wire mid_pipe_eff_sub_q;
  wire [6:0] mid_pipe_exp_diff_q;
  wire [6:0] mid_pipe_exp_prod_q;
  wire mid_pipe_final_sign_q;
  wire mid_pipe_ready;
  wire mid_pipe_res_is_spec_q;
  wire [2:0] mid_pipe_rnd_mode_q;
  wire [15:0] mid_pipe_spec_res_q;
  wire [4:0] mid_pipe_spec_stat_q;
  wire mid_pipe_sticky_q;
  wire [36:0] mid_pipe_sum_q;
  wire [1:0] mid_pipe_tag_q;
  wire [6:0] mid_pipe_tent_exp_q;
  wire mid_pipe_valid_q;
  wire [5:0] norm_shamt;
  wire [6:0] normalized_exponent;
  wire of_after_round;
  wire of_before_round;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  wire [15:0] operand_a;
  wire [15:0] operand_b;
  wire [15:0] operand_c;
  input [47:0] operands_i;
  wire [47:0] operands_i;
  wire out_pipe_aux_q;
  wire out_pipe_ready;
  wire [15:0] out_pipe_result_q;
  wire [4:0] out_pipe_status_q;
  wire [1:0] out_pipe_tag_q;
  wire out_pipe_valid_q;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  wire [14:0] pre_round_abs;
  wire [4:0] pre_round_exponent;
  wire [9:0] pre_round_mantissa;
  wire pre_round_sign;
  wire [21:0] product;
  wire [36:0] product_shifted;
  wire [15:0] regular_result;
  wire [4:0] regular_status;
  wire [15:0] result_d;
  wire result_is_special;
  wire result_is_special_q;
  output [15:0] result_o;
  wire [15:0] result_o;
  wire result_zero;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_q;
  wire [1:0] round_sticky_bits;
  wire [14:0] rounded_abs;
  wire rounded_sign;
  input rst_ni;
  wire rst_ni;
  wire signalling_nan;
  wire [15:0] special_result;
  wire [15:0] special_result_q;
  wire [4:0] special_status;
  wire [4:0] special_status_q;
  wire [4:0] status_d;
  output [4:0] status_o;
  wire [4:0] status_o;
  wire sticky_after_norm;
  wire sticky_before_add;
  wire sticky_before_add_q;
  wire [36:0] sum;
  wire sum_carry;
  wire [24:0] sum_lower;
  wire [36:0] sum_q;
  wire [37:0] sum_raw;
  wire [37:0] sum_shifted;
  wire [24:0] sum_sticky_bits;
  wire [7:1] sv2v_tmp_00793;
  wire [16:1] sv2v_tmp_0252C;
  wire [2:1] sv2v_tmp_192AB;
  wire sv2v_tmp_25EE6;
  wire [5:1] sv2v_tmp_2A843;
  wire [7:1] sv2v_tmp_2D21E;
  wire [2:1] sv2v_tmp_36387;
  wire [16:1] sv2v_tmp_4A83E;
  wire sv2v_tmp_56A72;
  wire [2:1] sv2v_tmp_6DFE4;
  wire sv2v_tmp_6F5F7;
  wire sv2v_tmp_73AEA;
  wire sv2v_tmp_7DEC5;
  wire [6:1] sv2v_tmp_83404;
  wire sv2v_tmp_8D189;
  wire sv2v_tmp_9E262;
  wire [3:1] sv2v_tmp_A74E2;
  wire [7:1] sv2v_tmp_B4C85;
  wire [48:1] sv2v_tmp_BC8B9;
  wire sv2v_tmp_CB10A;
  wire [4:1] sv2v_tmp_CBA8F;
  wire sv2v_tmp_CDA0E;
  wire [37:1] sv2v_tmp_CEAB3;
  wire sv2v_tmp_D1C37;
  wire sv2v_tmp_D7BD0;
  wire [3:1] sv2v_tmp_E1339;
  wire [5:1] sv2v_tmp_EC01B;
  wire [3:1] sv2v_tmp_FE389;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  wire [6:0] tentative_exponent;
  wire [6:0] tentative_exponent_q;
  wire tentative_sign;
  wire uf_after_round;
  assign exponent_addend = $signed({ 2'h0, operand_c[14:10] }) + $signed({ 6'h00, _054_ });
  assign _019_ = { 2'h0, exponent_a[4:0] } + info_a[6];
  assign _020_ = _019_ + { 2'h0, operand_b[14:10] };
  assign _021_ = _020_ + info_b[6];
  assign _022_ = { 13'h0000, product, 2'h0 } + addend_shifted;
  assign sum_raw = _022_ + inject_carry_in;
  assign _024_ = 32'd13 + leading_zero_count;
  assign _023_ = $signed(_067_) + $signed(32'd1);
  assign _025_ = $signed(32'd13) + $signed(exponent_product);
  assign _026_ = $signed(normalized_exponent) + $signed(32'd1);
  assign inject_carry_in = effective_subtraction & _056_;
  assign regular_status[1] = uf_after_round & regular_status[0];
  assign _029_ = | { _062_, _059_ };
  assign _028_ = | { _062_, _061_, _059_ };
  assign _027_ = | { _062_, _061_, _060_ };
  assign _030_ = | { _062_, _061_, _060_, _059_ };
  assign _031_ = sum_raw[37] == tentative_sign;
  assign uf_after_round = ! rounded_abs[14:10];
  assign of_after_round = rounded_abs[14:10] == 5'h1f;
  assign _032_ = $signed(_023_) >= $signed(32'd0);
  assign of_before_round = $signed(final_exponent) >= $signed(32'd31);
  assign _033_ = $signed(exponent_difference) > $signed(32'd0);
  assign _034_ = $signed(normalized_exponent) > $signed(32'd1);
  assign _035_ = $signed(exponent_difference) <= $signed(32'd4294967273);
  assign _036_ = $signed(exponent_difference) <= $signed(32'd13);
  assign _037_ = $signed(exponent_difference) <= $signed(32'd0);
  assign _038_ = $signed(exponent_difference) <= $signed(32'd2);
  assign _039_ = info_a[4] && info_b[5];
  assign _040_ = info_a[5] && info_b[4];
  assign _041_ = _049_ && info_c[4];
  assign _042_ = _041_ && effective_subtraction;
  assign _043_ = effective_subtraction && _057_;
  assign _044_ = effective_subtraction && _031_;
  assign _045_ = effective_subtraction && _038_;
  assign _046_ = _032_ && _047_;
  assign _047_ = ! lzc_zeroes;
  assign _048_ = _039_ || _040_;
  assign _049_ = info_a[4] || info_b[4];
  assign _050_ = info_a[5] || info_b[5];
  assign _051_ = _037_ || _045_;
  assign product = { info_a[7], mantissa_a[9:0] } * { info_b[7], operand_b[9:0] };
  assign _052_ = - sum_raw;
  assign _053_ = ~ operands_i[15];
  assign _054_ = ~ info_c[7];
  assign _055_ = ~ addend_after_shift;
  assign _056_ = ~ sticky_before_add;
  assign _057_ = ~ sum_raw[37];
  assign sticky_after_norm = _063_ | sticky_before_add;
  assign regular_status[2] = of_before_round | of_after_round;
  assign _058_ = _064_ | of_before_round;
  assign regular_status[0] = _058_ | of_after_round;
  assign _010_ = _034_ ? sum_shifted[35:24] : { 1'h0, sum_shifted[35:25] };
  assign _014_ = _034_ ? { sum_shifted[23:0], 1'h0 } : sum_shifted[24:0];
  assign _009_ = _034_ ? _068_[6:0] : 7'h00;
  assign _001_ = sum_shifted[36] ? normalized_exponent : _009_;
  assign _008_ = sum_shifted[36] ? sum_shifted[24:0] : _014_;
  assign _002_ = sum_shifted[36] ? { 1'h1, sum_shifted[35:25] } : _010_;
  assign final_mantissa = sum_shifted[37] ? { 1'h1, sum_shifted[36:26] } : _002_;
  assign sum_sticky_bits = sum_shifted[37] ? sum_shifted[25:1] : _008_;
  assign final_exponent = sum_shifted[37] ? _026_[6:0] : _001_;
  assign _004_ = _046_ ? _023_[6:0] : 7'h00;
  assign _003_ = _046_ ? _024_[5:0] : _025_[5:0];
  assign normalized_exponent = _051_ ? _004_ : mid_pipe_tent_exp_q;
  assign norm_shamt = _051_ ? _003_ : addend_shamt;
  assign _000_ = _036_ ? _066_[5:0] : 6'h00;
  assign addend_shamt = _035_ ? 6'h25 : _000_;
  assign _018_ = info_c[4] ? { operand_c[15], 15'h7c00 } : 16'h7e00;
  assign _017_ = _049_ ? { tentative_sign, 15'h7c00 } : _018_;
  assign _016_ = _042_ ? 1'h1 : 1'h0;
  assign _015_ = _042_ ? 16'h7e00 : _017_;
  assign _013_ = any_operand_inf ? _016_ : 1'h0;
  assign _012_ = any_operand_inf ? _015_ : 16'h7e00;
  assign _011_ = any_operand_inf ? 1'h1 : 1'h0;
  assign _007_ = any_operand_nan ? signalling_nan : _013_;
  assign _005_ = any_operand_nan ? 1'h1 : _011_;
  assign _006_ = any_operand_nan ? 16'h7e00 : _012_;
  assign special_status_q[4] = _048_ ? 1'h1 : _007_;
  assign result_is_special_q = _048_ ? 1'h1 : _005_;
  assign special_result_q = _048_ ? 16'h7e00 : _006_;
  function [0:0] _153_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _153_ = b[0:0];
      3'b?1?:
        _153_ = b[1:1];
      3'b1??:
        _153_ = b[2:2];
      default:
        _153_ = a;
    endcase
  endfunction
  assign operand_a[15] = _153_(1'h1, { _053_, 1'h0, operands_i[15] }, { _061_, _060_, _029_ });
  function [14:0] _154_;
    input [14:0] a;
    input [29:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _154_ = b[14:0];
      2'b1?:
        _154_ = b[29:15];
      default:
        _154_ = a;
    endcase
  endfunction
  assign { exponent_a[4:0], mantissa_a[9:0] } = _154_(15'h0401, { 15'h3c00, operands_i[14:0] }, { _060_, _028_ });
  assign info_b = _030_ ? info_q[15:8] : 8'hff;
  function [7:0] _156_;
    input [7:0] a;
    input [15:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _156_ = b[7:0];
      2'b1?:
        _156_ = b[15:8];
      default:
        _156_ = a;
    endcase
  endfunction
  assign info_a = _156_(8'hff, { 8'h81, info_q[7:0] }, { _060_, _028_ });
  function [15:0] _157_;
    input [15:0] a;
    input [31:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _157_ = b[15:0];
      2'b1?:
        _157_ = b[31:16];
      default:
        _157_ = a;
    endcase
  endfunction
  assign operand_c = _157_(16'h8401, { _073_, operands_i[46:32], 16'h8000 }, { _027_, _059_ });
  assign operand_b = _030_ ? operands_i[31:16] : 16'h8401;
  assign _059_ = op_i == 4'h3;
  assign _060_ = op_i == 4'h2;
  assign _061_ = op_i == 4'h1;
  assign _062_ = ! op_i;
  function [7:0] _163_;
    input [7:0] a;
    input [15:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _163_ = b[7:0];
      2'b1?:
        _163_ = b[15:8];
      default:
        _163_ = a;
    endcase
  endfunction
  assign info_c = _163_(8'hff, { info_q[23:16], 8'h21 }, { _027_, _059_ });
  assign any_operand_inf = | { info_c[4], info_b[4], info_a[4] };
  assign any_operand_nan = | { info_c[3], info_b[3], info_a[3] };
  assign signalling_nan = | { info_c[2], info_b[2], info_a[2] };
  assign sticky_before_add = | addend_sticky_bits;
  assign _063_ = | sum_sticky_bits;
  assign _064_ = | round_sticky_bits;
  assign sum_shifted = { sum_q[36:25], sum_lower } << norm_shamt;
  assign { addend_after_shift, addend_sticky_bits } = { info_c[7], operand_c[9:0], 37'h0000000000 } >> addend_shamt;
  assign _065_ = _021_ - 32'd15;
  assign exponent_difference = $signed(exponent_addend) - $signed(exponent_product);
  assign _066_ = $signed(32'd14) - $signed(exponent_difference);
  assign _067_ = $signed(exponent_product) - $signed({ 1'h0, leading_zero_count });
  assign _068_ = $signed(normalized_exponent) - $signed(32'd1);
  assign { _069_[31:7], exponent_product } = _050_ ? 32'd4294967283 : _065_;
  assign mid_pipe_tent_exp_q = _033_ ? exponent_addend : exponent_product;
  assign addend_shifted = effective_subtraction ? _055_ : addend_after_shift;
  assign { _070_[37], sum_q[36:25], sum_lower } = _043_ ? _052_ : sum_raw;
  assign _071_ = effective_subtraction ? 1'h0 : tentative_sign;
  assign pre_round_sign = _044_ ? 1'h1 : _071_;
  assign { _072_[31:5], pre_round_abs[14:10] } = of_before_round ? 32'd30 : { 27'h0000000, final_exponent[4:0] };
  assign pre_round_mantissa = of_before_round ? 10'h3ff : final_mantissa[10:1];
  assign round_sticky_bits = of_before_round ? 2'h3 : { final_mantissa[0], sticky_after_norm };
  assign result_o = result_is_special_q ? special_result_q : { rounded_sign, rounded_abs };
  assign status_o = result_is_special_q ? { special_status_q[4], 4'h0 } : { 2'h0, regular_status[2:0] };
  assign _073_ = operands_i[47] ^ op_mod_i;
  assign effective_subtraction = tentative_sign ^ operand_c[15];
  assign tentative_sign = operand_a[15] ^ operand_b[15];
  \$paramod$5445c4b4831d267c76d70f214646a25bf1d94aa9\fpnew_classifier  i_class_inputs (
    .info_o(info_q),
    .is_boxed_i(is_boxed_i),
    .operands_i(operands_i)
  );
  \$paramod\fpnew_rounding\AbsWidth=32'00000000000000000000000000001111  i_fpnew_rounding (
    .abs_rounded_o(rounded_abs),
    .abs_value_i({ pre_round_abs[14:10], pre_round_mantissa }),
    .effective_subtraction_i(effective_subtraction),
    .exact_zero_o(result_zero),
    .rnd_mode_i(rnd_mode_i),
    .round_sticky_bits_i(round_sticky_bits),
    .sign_i(pre_round_sign),
    .sign_o(rounded_sign)
  );
  \$paramod$f43ad4497f2ebae4f4fcbeb78548f418a29e40f3\lzc  i_lzc (
    .cnt_o(leading_zero_count),
    .empty_o(lzc_zeroes),
    .in_i(sum_lower)
  );
  assign _069_[6:0] = exponent_product;
  assign _070_[36:0] = { sum_q[36:25], sum_lower };
  assign _072_[4:0] = pre_round_abs[14:10];
  assign addend_shamt_q = addend_shamt;
  assign aux_o = aux_i;
  assign busy_o = in_valid_i;
  assign effective_subtraction_q = effective_subtraction;
  assign exponent_a[6:5] = 2'h0;
  assign exponent_b = { 2'h0, operand_b[14:10] };
  assign exponent_c = { 2'h0, operand_c[14:10] };
  assign exponent_difference_q = exponent_difference;
  assign exponent_product_q = exponent_product;
  assign extension_bit_o = 1'h1;
  assign final_sign = pre_round_sign;
  assign final_sign_q = pre_round_sign;
  assign in_ready_o = out_ready_i;
  assign inp_pipe_aux_q = aux_i;
  assign inp_pipe_is_boxed_q = is_boxed_i;
  assign inp_pipe_op_mod_q = op_mod_i;
  assign inp_pipe_op_q = op_i;
  assign inp_pipe_operands_q = operands_i;
  assign inp_pipe_ready = out_ready_i;
  assign inp_pipe_rnd_mode_q = rnd_mode_i;
  assign inp_pipe_tag_q = tag_i;
  assign inp_pipe_valid_q = in_valid_i;
  assign leading_zero_count_sgn = { 1'h0, leading_zero_count };
  assign mantissa_a[10] = info_a[7];
  assign mantissa_b = { info_b[7], operand_b[9:0] };
  assign mantissa_c = { info_c[7], operand_c[9:0] };
  assign mid_pipe_add_shamt_q = addend_shamt;
  assign mid_pipe_aux_q = aux_i;
  assign mid_pipe_eff_sub_q = effective_subtraction;
  assign mid_pipe_exp_diff_q = exponent_difference;
  assign mid_pipe_exp_prod_q = exponent_product;
  assign mid_pipe_final_sign_q = pre_round_sign;
  assign mid_pipe_ready = out_ready_i;
  assign mid_pipe_res_is_spec_q = result_is_special_q;
  assign mid_pipe_rnd_mode_q = rnd_mode_i;
  assign mid_pipe_spec_res_q = special_result_q;
  assign mid_pipe_spec_stat_q = { special_status_q[4], 4'h0 };
  assign mid_pipe_sticky_q = sticky_before_add;
  assign mid_pipe_sum_q = { sum_q[36:25], sum_lower };
  assign mid_pipe_tag_q = tag_i;
  assign mid_pipe_valid_q = in_valid_i;
  assign operand_a[14:0] = { exponent_a[4:0], mantissa_a[9:0] };
  assign out_pipe_aux_q = aux_i;
  assign out_pipe_ready = out_ready_i;
  assign out_pipe_result_q = result_o;
  assign out_pipe_status_q = status_o;
  assign out_pipe_tag_q = tag_i;
  assign out_pipe_valid_q = in_valid_i;
  assign out_valid_o = in_valid_i;
  assign pre_round_abs[9:0] = pre_round_mantissa;
  assign pre_round_exponent = pre_round_abs[14:10];
  assign product_shifted = { 13'h0000, product, 2'h0 };
  assign regular_result = { rounded_sign, rounded_abs };
  assign regular_status[4:3] = 2'h0;
  assign result_d = result_o;
  assign result_is_special = result_is_special_q;
  assign rnd_mode_q = rnd_mode_i;
  assign special_result = special_result_q;
  assign special_status = { special_status_q[4], 4'h0 };
  assign special_status_q[3:0] = 4'h0;
  assign status_d = status_o;
  assign sticky_before_add_q = sticky_before_add;
  assign sum = { sum_q[36:25], sum_lower };
  assign sum_carry = sum_raw[37];
  assign sum_q[24:0] = sum_lower;
  assign sv2v_tmp_00793 = exponent_difference;
  assign sv2v_tmp_0252C = result_o;
  assign sv2v_tmp_192AB = tag_i;
  assign sv2v_tmp_25EE6 = in_valid_i;
  assign sv2v_tmp_2A843 = status_o;
  assign sv2v_tmp_2D21E = exponent_product;
  assign sv2v_tmp_36387 = tag_i;
  assign sv2v_tmp_4A83E = special_result_q;
  assign sv2v_tmp_56A72 = effective_subtraction;
  assign sv2v_tmp_6DFE4 = tag_i;
  assign sv2v_tmp_6F5F7 = sticky_before_add;
  assign sv2v_tmp_73AEA = in_valid_i;
  assign sv2v_tmp_7DEC5 = result_is_special_q;
  assign sv2v_tmp_83404 = addend_shamt;
  assign sv2v_tmp_8D189 = aux_i;
  assign sv2v_tmp_9E262 = aux_i;
  assign sv2v_tmp_A74E2 = rnd_mode_i;
  assign sv2v_tmp_B4C85 = mid_pipe_tent_exp_q;
  assign sv2v_tmp_BC8B9 = operands_i;
  assign sv2v_tmp_CB10A = in_valid_i;
  assign sv2v_tmp_CBA8F = op_i;
  assign sv2v_tmp_CDA0E = aux_i;
  assign sv2v_tmp_CEAB3 = { sum_q[36:25], sum_lower };
  assign sv2v_tmp_D1C37 = op_mod_i;
  assign sv2v_tmp_D7BD0 = pre_round_sign;
  assign sv2v_tmp_E1339 = rnd_mode_i;
  assign sv2v_tmp_EC01B = { special_status_q[4], 4'h0 };
  assign sv2v_tmp_FE389 = is_boxed_i;
  assign tag_o = tag_i;
  assign tentative_exponent = mid_pipe_tent_exp_q;
  assign tentative_exponent_q = mid_pipe_tent_exp_q;
endmodule

module \$paramod$5445c4b4831d267c76d70f214646a25bf1d94aa9\fpnew_classifier (operands_i, is_boxed_i, info_o);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire \gen_num_values[0].is_boxed ;
  wire \gen_num_values[0].is_inf ;
  wire \gen_num_values[0].is_nan ;
  wire \gen_num_values[0].is_normal ;
  wire \gen_num_values[0].is_quiet ;
  wire \gen_num_values[0].is_signalling ;
  wire \gen_num_values[0].is_subnormal ;
  wire \gen_num_values[0].is_zero ;
  wire [15:0] \gen_num_values[0].value ;
  wire \gen_num_values[1].is_boxed ;
  wire \gen_num_values[1].is_inf ;
  wire \gen_num_values[1].is_nan ;
  wire \gen_num_values[1].is_normal ;
  wire \gen_num_values[1].is_quiet ;
  wire \gen_num_values[1].is_signalling ;
  wire \gen_num_values[1].is_subnormal ;
  wire \gen_num_values[1].is_zero ;
  wire [15:0] \gen_num_values[1].value ;
  wire \gen_num_values[2].is_boxed ;
  wire \gen_num_values[2].is_inf ;
  wire \gen_num_values[2].is_nan ;
  wire \gen_num_values[2].is_normal ;
  wire \gen_num_values[2].is_quiet ;
  wire \gen_num_values[2].is_signalling ;
  wire \gen_num_values[2].is_subnormal ;
  wire \gen_num_values[2].is_zero ;
  wire [15:0] \gen_num_values[2].value ;
  output [23:0] info_o;
  wire [23:0] info_o;
  input [2:0] is_boxed_i;
  wire [2:0] is_boxed_i;
  input [47:0] operands_i;
  wire [47:0] operands_i;
  assign _000_ = ! operands_i[30:26];
  assign _002_ = ! operands_i[46:42];
  assign _004_ = ! operands_i[14:10];
  assign _005_ = ! operands_i[9:0];
  assign _001_ = ! operands_i[25:16];
  assign _003_ = ! operands_i[41:32];
  assign _006_ = operands_i[14:10] == 5'h1f;
  assign _007_ = operands_i[30:26] == 5'h1f;
  assign _008_ = operands_i[46:42] == 5'h1f;
  assign _009_ = ~ operands_i[9];
  assign _010_ = ~ operands_i[25];
  assign _011_ = ~ operands_i[41];
  assign _012_ = is_boxed_i[1] && _036_;
  assign \gen_num_values[1].is_normal  = _012_ && _037_;
  assign _013_ = is_boxed_i[2] && _038_;
  assign \gen_num_values[2].is_normal  = _013_ && _039_;
  assign _014_ = is_boxed_i[0] && _040_;
  assign \gen_num_values[0].is_normal  = _014_ && _041_;
  assign \gen_num_values[1].is_zero  = _015_ && _001_;
  assign \gen_num_values[2].is_zero  = _016_ && _003_;
  assign \gen_num_values[0].is_zero  = _017_ && _005_;
  assign \gen_num_values[0].is_subnormal  = _017_ && _027_;
  assign _015_ = is_boxed_i[1] && _000_;
  assign \gen_num_values[1].is_subnormal  = _015_ && _028_;
  assign _016_ = is_boxed_i[2] && _002_;
  assign \gen_num_values[2].is_subnormal  = _016_ && _029_;
  assign _017_ = is_boxed_i[0] && _004_;
  assign _018_ = _006_ && _005_;
  assign \gen_num_values[0].is_inf  = is_boxed_i[0] && _018_;
  assign _019_ = _007_ && _001_;
  assign \gen_num_values[1].is_inf  = is_boxed_i[1] && _019_;
  assign _020_ = _008_ && _003_;
  assign \gen_num_values[2].is_inf  = is_boxed_i[2] && _020_;
  assign _021_ = _006_ && _042_;
  assign _022_ = _007_ && _043_;
  assign _023_ = _008_ && _044_;
  assign _024_ = is_boxed_i[0] && \gen_num_values[0].is_nan ;
  assign \gen_num_values[0].is_signalling  = _024_ && _009_;
  assign _025_ = is_boxed_i[1] && \gen_num_values[1].is_nan ;
  assign \gen_num_values[1].is_signalling  = _025_ && _010_;
  assign _026_ = is_boxed_i[2] && \gen_num_values[2].is_nan ;
  assign \gen_num_values[2].is_signalling  = _026_ && _011_;
  assign \gen_num_values[0].is_quiet  = \gen_num_values[0].is_nan  && _033_;
  assign \gen_num_values[1].is_quiet  = \gen_num_values[1].is_nan  && _034_;
  assign \gen_num_values[2].is_quiet  = \gen_num_values[2].is_nan  && _035_;
  assign _027_ = ! \gen_num_values[0].is_zero ;
  assign _028_ = ! \gen_num_values[1].is_zero ;
  assign _029_ = ! \gen_num_values[2].is_zero ;
  assign _030_ = ! is_boxed_i[0];
  assign _031_ = ! is_boxed_i[1];
  assign _032_ = ! is_boxed_i[2];
  assign _033_ = ! \gen_num_values[0].is_signalling ;
  assign _034_ = ! \gen_num_values[1].is_signalling ;
  assign _035_ = ! \gen_num_values[2].is_signalling ;
  assign \gen_num_values[0].is_nan  = _030_ || _021_;
  assign \gen_num_values[1].is_nan  = _031_ || _022_;
  assign \gen_num_values[2].is_nan  = _032_ || _023_;
  assign _036_ = | operands_i[30:26];
  assign _037_ = operands_i[30:26] != 5'h1f;
  assign _038_ = | operands_i[46:42];
  assign _039_ = operands_i[46:42] != 5'h1f;
  assign _040_ = | operands_i[14:10];
  assign _041_ = operands_i[14:10] != 5'h1f;
  assign _042_ = | operands_i[9:0];
  assign _043_ = | operands_i[25:16];
  assign _044_ = | operands_i[41:32];
  assign \gen_num_values[0].is_boxed  = is_boxed_i[0];
  assign \gen_num_values[0].value  = operands_i[15:0];
  assign \gen_num_values[1].is_boxed  = is_boxed_i[1];
  assign \gen_num_values[1].value  = operands_i[31:16];
  assign \gen_num_values[2].is_boxed  = is_boxed_i[2];
  assign \gen_num_values[2].value  = operands_i[47:32];
  assign info_o = { \gen_num_values[2].is_normal , \gen_num_values[2].is_subnormal , \gen_num_values[2].is_zero , \gen_num_values[2].is_inf , \gen_num_values[2].is_nan , \gen_num_values[2].is_signalling , \gen_num_values[2].is_quiet , is_boxed_i[2], \gen_num_values[1].is_normal , \gen_num_values[1].is_subnormal , \gen_num_values[1].is_zero , \gen_num_values[1].is_inf , \gen_num_values[1].is_nan , \gen_num_values[1].is_signalling , \gen_num_values[1].is_quiet , is_boxed_i[1], \gen_num_values[0].is_normal , \gen_num_values[0].is_subnormal , \gen_num_values[0].is_zero , \gen_num_values[0].is_inf , \gen_num_values[0].is_nan , \gen_num_values[0].is_signalling , \gen_num_values[0].is_quiet , is_boxed_i[0] };
endmodule

module \$paramod$7950bc2ef5cf0b0cdb311eeeb45fb3a0915285e6\fpnew_opgroup_fmt_slice_E368D_75924 (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, op_mod_i, vectorial_op_i, tag_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, tag_o, out_valid_o, out_ready_i, busy_o);
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  output extension_bit_o;
  wire extension_bit_o;
  input flush_i;
  wire flush_i;
  wire \gen_num_lanes[0].active_lane.in_valid ;
  wire [47:0] \gen_num_lanes[0].active_lane.local_operands ;
  wire [15:0] \gen_num_lanes[0].active_lane.op_result ;
  wire [4:0] \gen_num_lanes[0].active_lane.op_status ;
  wire \gen_num_lanes[0].active_lane.out_ready ;
  wire \gen_num_lanes[0].active_lane.out_valid ;
  wire [31:0] \gen_num_lanes[0].active_lane.prepare_input.sv2v_autoblock_1.i ;
  wire [15:0] \gen_num_lanes[0].local_result ;
  wire \gen_num_lanes[0].local_sign ;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [2:0] is_boxed_i;
  wire [2:0] is_boxed_i;
  wire lane_busy;
  wire [9:0] lane_class_mask;
  wire lane_ext_bit;
  wire lane_in_ready;
  wire lane_is_class;
  wire lane_out_valid;
  wire [4:0] lane_status;
  wire [1:0] lane_tags;
  wire lane_vectorial;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [47:0] operands_i;
  wire [47:0] operands_i;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  wire [31:0] \output_processing.sv2v_autoblock_2.i ;
  wire [4:0] \output_processing.temp_status ;
  wire result_is_class;
  wire result_is_vector;
  output [15:0] result_o;
  wire [15:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  wire [15:0] slice_regular_result;
  wire [15:0] slice_result;
  wire [15:0] slice_vec_class_result;
  output [4:0] status_o;
  wire [4:0] status_o;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  wire vectorial_op;
  input vectorial_op_i;
  wire vectorial_op_i;
  assign result_o = \gen_num_lanes[0].active_lane.out_valid  ? \gen_num_lanes[0].active_lane.op_result  : { lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit, lane_ext_bit };
  assign status_o = \gen_num_lanes[0].active_lane.out_valid  ? \gen_num_lanes[0].active_lane.op_status  : 5'h00;
  \$paramod$4a8ac12f2940303fa2e2f18742ec0f9714062a4c\fpnew_fma_FC83A_5615B  \gen_num_lanes[0].active_lane.lane_instance.i_fma  (
    .aux_i(vectorial_op_i),
    .aux_o(lane_vectorial),
    .busy_o(lane_busy),
    .clk_i(clk_i),
    .extension_bit_o(lane_ext_bit),
    .flush_i(flush_i),
    .in_ready_o(lane_in_ready),
    .in_valid_i(in_valid_i),
    .is_boxed_i(is_boxed_i),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(operands_i),
    .out_ready_i(out_ready_i),
    .out_valid_o(\gen_num_lanes[0].active_lane.out_valid ),
    .result_o(\gen_num_lanes[0].active_lane.op_result ),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .status_o(\gen_num_lanes[0].active_lane.op_status ),
    .tag_i(tag_i),
    .tag_o(lane_tags)
  );
  assign busy_o = lane_busy;
  assign extension_bit_o = lane_ext_bit;
  assign \gen_num_lanes[0].active_lane.in_valid  = in_valid_i;
  assign \gen_num_lanes[0].active_lane.local_operands  = operands_i;
  assign \gen_num_lanes[0].active_lane.out_ready  = out_ready_i;
  assign \gen_num_lanes[0].active_lane.prepare_input.sv2v_autoblock_1.i  = 32'd3;
  assign \gen_num_lanes[0].local_result  = result_o;
  assign \gen_num_lanes[0].local_sign  = 1'h1;
  assign in_ready_o = lane_in_ready;
  assign lane_class_mask = 10'h001;
  assign lane_is_class = 1'h0;
  assign lane_out_valid = \gen_num_lanes[0].active_lane.out_valid ;
  assign lane_status = status_o;
  assign out_valid_o = \gen_num_lanes[0].active_lane.out_valid ;
  assign \output_processing.sv2v_autoblock_2.i  = 32'd1;
  assign \output_processing.temp_status  = status_o;
  assign result_is_class = 1'h0;
  assign result_is_vector = lane_vectorial;
  assign slice_regular_result = result_o;
  assign slice_result = result_o;
  assign slice_vec_class_result = 16'h0081;
  assign tag_o = lane_tags;
  assign vectorial_op = vectorial_op_i;
endmodule

module \$paramod$7ec12dc1c1fb40e590244529b0a1c1961e76ed61\fpnew_opgroup_block_A94B6_B7406 (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, op_mod_i, src_fmt_i, dst_fmt_i, int_fmt_i, vectorial_op_i, tag_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, tag_o, out_valid_o, out_ready_i
, busy_o);
  wire _0_;
  wire _1_;
  wire [23:0] arbiter_output;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  input [2:0] dst_fmt_i;
  wire [2:0] dst_fmt_i;
  output extension_bit_o;
  wire extension_bit_o;
  input flush_i;
  wire flush_i;
  wire [4:0] fmt_busy;
  wire [4:0] fmt_in_ready;
  wire [4:0] fmt_out_ready;
  wire [4:0] fmt_out_valid;
  wire [119:0] fmt_outputs;
  wire \gen_parallel_slices[2].active_format.in_valid ;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [1:0] int_fmt_i;
  wire [1:0] int_fmt_i;
  input [14:0] is_boxed_i;
  wire [14:0] is_boxed_i;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [47:0] operands_i;
  wire [47:0] operands_i;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  output [15:0] result_o;
  wire [15:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  input [2:0] src_fmt_i;
  wire [2:0] src_fmt_i;
  output [4:0] status_o;
  wire [4:0] status_o;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  input vectorial_op_i;
  wire vectorial_op_i;
  assign in_ready_o = in_valid_i & _1_;
  assign \gen_parallel_slices[2].active_format.in_valid  = in_valid_i & _0_;
  assign _0_ = dst_fmt_i == 3'h2;
  wire [4:0] _6_ = { 2'h0, fmt_in_ready[2], 2'h0 };
  assign _1_ = _6_[dst_fmt_i +: 1];
  \$paramod$7950bc2ef5cf0b0cdb311eeeb45fb3a0915285e6\fpnew_opgroup_fmt_slice_E368D_75924  \gen_parallel_slices[2].active_format.i_fmt_slice  (
    .busy_o(busy_o),
    .clk_i(clk_i),
    .extension_bit_o(fmt_outputs[50]),
    .flush_i(flush_i),
    .in_ready_o(fmt_in_ready[2]),
    .in_valid_i(\gen_parallel_slices[2].active_format.in_valid ),
    .is_boxed_i(is_boxed_i[8:6]),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(operands_i),
    .out_ready_i(fmt_out_ready[2]),
    .out_valid_o(fmt_out_valid[2]),
    .result_o(fmt_outputs[71:56]),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .status_o(fmt_outputs[55:51]),
    .tag_i(tag_i),
    .tag_o(fmt_outputs[49:48]),
    .vectorial_op_i(vectorial_op_i)
  );
  \$paramod$ea0afc4617438da89f766dca3e2e990528ae0bae\rr_arb_tree_52163_F264E  i_arbiter (
    .clk_i(clk_i),
    .data_i({ 48'hfffffdfffffd, fmt_outputs[71:48], 48'hfffffdfffffd }),
    .data_o(arbiter_output),
    .flush_i(flush_i),
    .gnt_i(out_ready_i),
    .gnt_o(fmt_out_ready),
    .req_i({ 2'h0, fmt_out_valid[2], 2'h0 }),
    .req_o(out_valid_o),
    .rr_i(3'h0),
    .rst_ni(rst_ni)
  );
  assign extension_bit_o = arbiter_output[2];
  assign fmt_busy = { 2'h0, busy_o, 2'h0 };
  assign { fmt_in_ready[4:3], fmt_in_ready[1:0] } = 4'h0;
  assign { fmt_out_valid[4:3], fmt_out_valid[1:0] } = 4'h0;
  assign { fmt_outputs[119:72], fmt_outputs[47:0] } = 96'hfffffdfffffdfffffdfffffd;
  assign result_o = arbiter_output[23:8];
  assign status_o = arbiter_output[7:3];
  assign tag_o = arbiter_output[1:0];
endmodule

module \$paramod$d25e8f5a7a010abd03c26d8d770bf8e13939c78e\fpnew_opgroup_block_A94B6_B7406 (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, op_mod_i, src_fmt_i, dst_fmt_i, int_fmt_i, vectorial_op_i, tag_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, tag_o, out_valid_o, out_ready_i
, busy_o);
  wire _0_;
  wire [23:0] arbiter_output;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  input [2:0] dst_fmt_i;
  wire [2:0] dst_fmt_i;
  output extension_bit_o;
  wire extension_bit_o;
  input flush_i;
  wire flush_i;
  wire [4:0] fmt_busy;
  wire [4:0] fmt_in_ready;
  wire [4:0] fmt_out_ready;
  wire [4:0] fmt_out_valid;
  wire [119:0] fmt_outputs;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [1:0] int_fmt_i;
  wire [1:0] int_fmt_i;
  input [9:0] is_boxed_i;
  wire [9:0] is_boxed_i;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [31:0] operands_i;
  wire [31:0] operands_i;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  output [15:0] result_o;
  wire [15:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  input [2:0] src_fmt_i;
  wire [2:0] src_fmt_i;
  output [4:0] status_o;
  wire [4:0] status_o;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  input vectorial_op_i;
  wire vectorial_op_i;
  assign in_ready_o = in_valid_i & _0_;
  wire [4:0] _3_ = 5'h00;
  assign _0_ = _3_[dst_fmt_i +: 1];
  \$paramod$ea0afc4617438da89f766dca3e2e990528ae0bae\rr_arb_tree_52163_F264E  i_arbiter (
    .clk_i(clk_i),
    .data_i(120'hfffffdfffffdfffffdfffffdfffffd),
    .data_o(arbiter_output),
    .flush_i(flush_i),
    .gnt_i(out_ready_i),
    .gnt_o(fmt_out_ready),
    .req_i(5'h00),
    .req_o(out_valid_o),
    .rr_i(3'h0),
    .rst_ni(rst_ni)
  );
  assign busy_o = 1'h0;
  assign extension_bit_o = arbiter_output[2];
  assign fmt_busy = 5'h00;
  assign fmt_in_ready = 5'h00;
  assign fmt_out_valid = 5'h00;
  assign fmt_outputs = 120'hfffffdfffffdfffffdfffffdfffffd;
  assign result_o = arbiter_output[23:8];
  assign status_o = arbiter_output[7:3];
  assign tag_o = arbiter_output[1:0];
endmodule

module \$paramod$ea0afc4617438da89f766dca3e2e990528ae0bae\rr_arb_tree_52163_F264E (clk_i, rst_ni, flush_i, rr_i, req_i, gnt_o, data_i, req_o, gnt_i, data_o, idx_o);
  wire [2:0] _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  input clk_i;
  wire clk_i;
  input [119:0] data_i;
  wire [119:0] data_i;
  output [23:0] data_o;
  wire [23:0] data_o;
  input flush_i;
  wire flush_i;
  wire [167:0] \gen_arbiter.data_nodes ;
  wire [2:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  wire [4:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  wire [2:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  wire [2:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  wire [4:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  wire [2:0] \gen_arbiter.gen_int_rr.rr_d ;
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  wire \gen_arbiter.gen_levels[2].gen_level[0].sel ;
  wire \gen_arbiter.gen_levels[2].gen_level[1].sel ;
  wire [6:0] \gen_arbiter.gnt_nodes ;
  wire [20:0] \gen_arbiter.index_nodes ;
  wire [4:0] \gen_arbiter.req_d ;
  wire [6:0] \gen_arbiter.req_nodes ;
  reg [2:0] \gen_arbiter.rr_q ;
  input gnt_i;
  wire gnt_i;
  output [4:0] gnt_o;
  wire [4:0] gnt_o;
  output [2:0] idx_o;
  wire [2:0] idx_o;
  input [4:0] req_i;
  wire [4:0] req_i;
  output req_o;
  wire req_o;
  input [2:0] rr_i;
  wire [2:0] rr_i;
  input rst_ni;
  wire rst_ni;
  wire [2:0] \sv2v_cast_29535$func$FPNewBlackbox_H1l0s.preprocessed.v:149$524.inp ;
  wire [2:0] \sv2v_cast_29535$func$FPNewBlackbox_H1l0s.preprocessed.v:149$525.inp ;
  wire [2:0] \sv2v_cast_29535$func$FPNewBlackbox_H1l0s.preprocessed.v:169$508.$result ;
  wire [2:0] \sv2v_cast_29535$func$FPNewBlackbox_H1l0s.preprocessed.v:169$509.$result ;
  wire [2:0] \sv2v_cast_29535$func$FPNewBlackbox_H1l0s.preprocessed.v:169$518.inp ;
  wire [2:0] \sv2v_cast_29535$func$FPNewBlackbox_H1l0s.preprocessed.v:169$519.inp ;
  wire [2:0] \sv2v_cast_29535$func$FPNewBlackbox_H1l0s.preprocessed.v:169$520.inp ;
  wire [2:0] \sv2v_cast_29535$func$FPNewBlackbox_H1l0s.preprocessed.v:169$521.inp ;
  wire [2:0] \sv2v_cast_29535$func$FPNewBlackbox_H1l0s.preprocessed.v:169$522.inp ;
  wire [2:0] \sv2v_cast_29535$func$FPNewBlackbox_H1l0s.preprocessed.v:169$523.inp ;
  assign _01_ = req_i[1] & \gen_arbiter.rr_q [0];
  assign _02_ = req_i[3] & \gen_arbiter.rr_q [0];
  assign gnt_o[0] = \gen_arbiter.gnt_nodes [3] & _19_;
  assign gnt_o[2] = \gen_arbiter.gnt_nodes [4] & _20_;
  assign gnt_o[1] = \gen_arbiter.gnt_nodes [3] & \gen_arbiter.gen_levels[2].gen_level[0].sel ;
  assign gnt_o[3] = \gen_arbiter.gnt_nodes [4] & \gen_arbiter.gen_levels[2].gen_level[1].sel ;
  assign _03_ = req_i[4] & \gen_arbiter.rr_q [2];
  assign _04_ = \gen_arbiter.req_nodes [4] & \gen_arbiter.rr_q [1];
  assign \gen_arbiter.gnt_nodes [1] = gnt_i & _23_;
  assign \gen_arbiter.gnt_nodes [3] = \gen_arbiter.gnt_nodes [1] & _24_;
  assign gnt_o[4] = \gen_arbiter.gnt_nodes [2] & req_i[4];
  assign \gen_arbiter.gnt_nodes [2] = gnt_i & \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \gen_arbiter.gnt_nodes [4] = \gen_arbiter.gnt_nodes [1] & \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.rr_q  <= 3'h0;
    else if (_05_) \gen_arbiter.rr_q  <= _00_;
  assign _05_ = | { _16_, flush_i };
  assign _06_ = 32'd0 > \gen_arbiter.rr_q ;
  assign _07_ = 32'd1 > \gen_arbiter.rr_q ;
  assign _08_ = 32'd2 > \gen_arbiter.rr_q ;
  assign _09_ = 32'd3 > \gen_arbiter.rr_q ;
  assign _10_ = 32'd4 > \gen_arbiter.rr_q ;
  assign _11_ = 32'd0 <= \gen_arbiter.rr_q ;
  assign _12_ = 32'd1 <= \gen_arbiter.rr_q ;
  assign _13_ = 32'd2 <= \gen_arbiter.rr_q ;
  assign _14_ = 32'd3 <= \gen_arbiter.rr_q ;
  assign _15_ = 32'd4 <= \gen_arbiter.rr_q ;
  assign _16_ = gnt_i && req_o;
  assign _17_ = ~ req_i[0];
  assign _18_ = ~ req_i[2];
  assign _19_ = ~ \gen_arbiter.gen_levels[2].gen_level[0].sel ;
  assign _20_ = ~ \gen_arbiter.gen_levels[2].gen_level[1].sel ;
  assign _21_ = ~ \gen_arbiter.req_nodes [1];
  assign _22_ = ~ \gen_arbiter.req_nodes [3];
  assign _23_ = ~ \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign _24_ = ~ \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [3] = req_i[0] | req_i[1];
  assign \gen_arbiter.req_nodes [4] = req_i[2] | req_i[3];
  assign \gen_arbiter.gen_levels[2].gen_level[0].sel  = _17_ | _01_;
  assign \gen_arbiter.gen_levels[2].gen_level[1].sel  = _18_ | _02_;
  assign req_o = \gen_arbiter.req_nodes [1] | req_i[4];
  assign \gen_arbiter.req_nodes [1] = \gen_arbiter.req_nodes [3] | \gen_arbiter.req_nodes [4];
  assign \gen_arbiter.gen_levels[0].gen_level[0].sel  = _21_ | _03_;
  assign \gen_arbiter.gen_levels[1].gen_level[0].sel  = _22_ | _04_;
  assign _00_ = flush_i ? 3'h0 : \gen_arbiter.gen_int_rr.rr_d ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = _06_ ? req_i[0] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1] = _07_ ? req_i[1] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2] = _08_ ? req_i[2] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3] = _09_ ? req_i[3] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [4] = _10_ ? req_i[4] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = _11_ ? req_i[0] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1] = _12_ ? req_i[1] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2] = _13_ ? req_i[2] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3] = _14_ ? req_i[3] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [4] = _15_ ? req_i[4] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  = \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty  ? \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx  : \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  assign \gen_arbiter.gen_int_rr.rr_d  = _16_ ? \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  : 3'hx;
  assign \gen_arbiter.data_nodes [95:72] = \gen_arbiter.gen_levels[2].gen_level[0].sel  ? data_i[47:24] : data_i[23:0];
  assign \gen_arbiter.data_nodes [119:96] = \gen_arbiter.gen_levels[2].gen_level[1].sel  ? data_i[95:72] : data_i[71:48];
  assign idx_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? { 1'h1, \sv2v_cast_29535$func$FPNewBlackbox_H1l0s.preprocessed.v:169$508.$result [1:0] } : { 1'h0, \sv2v_cast_29535$func$FPNewBlackbox_H1l0s.preprocessed.v:169$509.$result [1:0] };
  assign { \gen_arbiter.index_nodes [5], \sv2v_cast_29535$func$FPNewBlackbox_H1l0s.preprocessed.v:169$509.$result [1:0] } = \gen_arbiter.gen_levels[1].gen_level[0].sel  ? { 2'h1, \gen_arbiter.gen_levels[2].gen_level[1].sel  } : { 2'h0, \gen_arbiter.gen_levels[2].gen_level[0].sel  };
  assign { \gen_arbiter.index_nodes [8], \sv2v_cast_29535$func$FPNewBlackbox_H1l0s.preprocessed.v:169$508.$result [1:0] } = req_i[4] ? 3'h0 : 3'h2;
  assign data_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? \gen_arbiter.data_nodes [71:48] : \gen_arbiter.data_nodes [47:24];
  assign \gen_arbiter.data_nodes [47:24] = \gen_arbiter.gen_levels[1].gen_level[0].sel  ? \gen_arbiter.data_nodes [119:96] : \gen_arbiter.data_nodes [95:72];
  assign \gen_arbiter.data_nodes [71:48] = req_i[4] ? data_i[119:96] : 24'h000000;
  \$paramod\lzc\WIDTH=32'00000000000000000000000000000101\MODE=1'0  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask )
  );
  \$paramod\lzc\WIDTH=32'00000000000000000000000000000101\MODE=1'0  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask )
  );
  assign { \gen_arbiter.data_nodes [167:120], \gen_arbiter.data_nodes [23:0] } = { 24'h000000, data_i[119:96], data_o };
  assign { \gen_arbiter.gnt_nodes [5], \gen_arbiter.gnt_nodes [0] } = { gnt_o[4], gnt_i };
  assign { \gen_arbiter.index_nodes [20:9], \gen_arbiter.index_nodes [7:6], \gen_arbiter.index_nodes [4:0] } = { 8'h00, \gen_arbiter.gen_levels[2].gen_level[1].sel , 2'h0, \gen_arbiter.gen_levels[2].gen_level[0].sel , \sv2v_cast_29535$func$FPNewBlackbox_H1l0s.preprocessed.v:169$508.$result [1:0], \sv2v_cast_29535$func$FPNewBlackbox_H1l0s.preprocessed.v:169$509.$result [1:0], idx_o };
  assign \gen_arbiter.req_d  = req_i;
  assign { \gen_arbiter.req_nodes [6:5], \gen_arbiter.req_nodes [2], \gen_arbiter.req_nodes [0] } = { 1'h0, req_i[4], req_i[4], req_o };
  assign \sv2v_cast_29535$func$FPNewBlackbox_H1l0s.preprocessed.v:149$524.inp  = 3'hx;
  assign \sv2v_cast_29535$func$FPNewBlackbox_H1l0s.preprocessed.v:149$525.inp  = 3'hx;
  assign \sv2v_cast_29535$func$FPNewBlackbox_H1l0s.preprocessed.v:169$508.$result [2] = 1'h1;
  assign \sv2v_cast_29535$func$FPNewBlackbox_H1l0s.preprocessed.v:169$509.$result [2] = 1'h0;
  assign \sv2v_cast_29535$func$FPNewBlackbox_H1l0s.preprocessed.v:169$518.inp  = 3'hx;
  assign \sv2v_cast_29535$func$FPNewBlackbox_H1l0s.preprocessed.v:169$519.inp  = 3'hx;
  assign \sv2v_cast_29535$func$FPNewBlackbox_H1l0s.preprocessed.v:169$520.inp  = 3'hx;
  assign \sv2v_cast_29535$func$FPNewBlackbox_H1l0s.preprocessed.v:169$521.inp  = 3'hx;
  assign \sv2v_cast_29535$func$FPNewBlackbox_H1l0s.preprocessed.v:169$522.inp  = 3'hx;
  assign \sv2v_cast_29535$func$FPNewBlackbox_H1l0s.preprocessed.v:169$523.inp  = 3'hx;
endmodule

module \$paramod$f43ad4497f2ebae4f4fcbeb78548f418a29e40f3\lzc (in_i, cnt_o, empty_o);
  output [4:0] cnt_o;
  wire [4:0] cnt_o;
  output empty_o;
  wire empty_o;
  wire [31:0] \gen_lzc.flip_vector.sv2v_autoblock_1.i ;
  wire [24:0] \gen_lzc.in_tmp ;
  wire [124:0] \gen_lzc.index_lut ;
  wire [159:0] \gen_lzc.index_nodes ;
  wire [31:0] \gen_lzc.sel_nodes ;
  input [24:0] in_i;
  wire [24:0] in_i;
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign \gen_lzc.sel_nodes [15] = in_i[24] | in_i[23];
  assign \gen_lzc.sel_nodes [16] = in_i[22] | in_i[21];
  assign \gen_lzc.sel_nodes [17] = in_i[20] | in_i[19];
  assign \gen_lzc.sel_nodes [18] = in_i[18] | in_i[17];
  assign \gen_lzc.sel_nodes [19] = in_i[16] | in_i[15];
  assign \gen_lzc.sel_nodes [20] = in_i[14] | in_i[13];
  assign \gen_lzc.sel_nodes [21] = in_i[12] | in_i[11];
  assign \gen_lzc.sel_nodes [22] = in_i[10] | in_i[9];
  assign \gen_lzc.sel_nodes [23] = in_i[8] | in_i[7];
  assign \gen_lzc.sel_nodes [24] = in_i[6] | in_i[5];
  assign \gen_lzc.sel_nodes [25] = in_i[4] | in_i[3];
  assign \gen_lzc.sel_nodes [26] = in_i[2] | in_i[1];
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | \gen_lzc.sel_nodes [2];
  assign \gen_lzc.sel_nodes [1] = \gen_lzc.sel_nodes [3] | \gen_lzc.sel_nodes [4];
  assign \gen_lzc.sel_nodes [2] = \gen_lzc.sel_nodes [5] | in_i[0];
  assign \gen_lzc.sel_nodes [3] = \gen_lzc.sel_nodes [7] | \gen_lzc.sel_nodes [8];
  assign \gen_lzc.sel_nodes [4] = \gen_lzc.sel_nodes [9] | \gen_lzc.sel_nodes [10];
  assign \gen_lzc.sel_nodes [5] = \gen_lzc.sel_nodes [11] | \gen_lzc.sel_nodes [12];
  assign \gen_lzc.sel_nodes [7] = \gen_lzc.sel_nodes [15] | \gen_lzc.sel_nodes [16];
  assign \gen_lzc.sel_nodes [8] = \gen_lzc.sel_nodes [17] | \gen_lzc.sel_nodes [18];
  assign \gen_lzc.sel_nodes [9] = \gen_lzc.sel_nodes [19] | \gen_lzc.sel_nodes [20];
  assign \gen_lzc.sel_nodes [10] = \gen_lzc.sel_nodes [21] | \gen_lzc.sel_nodes [22];
  assign \gen_lzc.sel_nodes [11] = \gen_lzc.sel_nodes [23] | \gen_lzc.sel_nodes [24];
  assign \gen_lzc.sel_nodes [12] = \gen_lzc.sel_nodes [25] | \gen_lzc.sel_nodes [26];
  assign \gen_lzc.index_nodes [79:75] = in_i[24] ? 5'h00 : 5'h01;
  assign \gen_lzc.index_nodes [84:80] = in_i[22] ? 5'h02 : 5'h03;
  assign \gen_lzc.index_nodes [89:85] = in_i[20] ? 5'h04 : 5'h05;
  assign \gen_lzc.index_nodes [94:90] = in_i[18] ? 5'h06 : 5'h07;
  assign \gen_lzc.index_nodes [99:95] = in_i[16] ? 5'h08 : 5'h09;
  assign \gen_lzc.index_nodes [104:100] = in_i[14] ? 5'h0a : 5'h0b;
  assign \gen_lzc.index_nodes [109:105] = in_i[12] ? 5'h0c : 5'h0d;
  assign \gen_lzc.index_nodes [114:110] = in_i[10] ? 5'h0e : 5'h0f;
  assign \gen_lzc.index_nodes [119:115] = in_i[8] ? 5'h10 : 5'h11;
  assign \gen_lzc.index_nodes [124:120] = in_i[6] ? 5'h12 : 5'h13;
  assign \gen_lzc.index_nodes [129:125] = in_i[4] ? 5'h14 : 5'h15;
  assign \gen_lzc.index_nodes [134:130] = in_i[2] ? 5'h16 : 5'h17;
  assign cnt_o = \gen_lzc.sel_nodes [1] ? \gen_lzc.index_nodes [9:5] : \gen_lzc.index_nodes [14:10];
  assign \gen_lzc.index_nodes [9:5] = \gen_lzc.sel_nodes [3] ? \gen_lzc.index_nodes [19:15] : \gen_lzc.index_nodes [24:20];
  assign \gen_lzc.index_nodes [14:10] = \gen_lzc.sel_nodes [5] ? \gen_lzc.index_nodes [29:25] : \gen_lzc.index_nodes [34:30];
  assign \gen_lzc.index_nodes [19:15] = \gen_lzc.sel_nodes [7] ? \gen_lzc.index_nodes [39:35] : \gen_lzc.index_nodes [44:40];
  assign \gen_lzc.index_nodes [24:20] = \gen_lzc.sel_nodes [9] ? \gen_lzc.index_nodes [49:45] : \gen_lzc.index_nodes [54:50];
  assign \gen_lzc.index_nodes [29:25] = \gen_lzc.sel_nodes [11] ? \gen_lzc.index_nodes [59:55] : \gen_lzc.index_nodes [64:60];
  assign \gen_lzc.index_nodes [34:30] = in_i[0] ? 5'h18 : 5'h00;
  assign \gen_lzc.index_nodes [39:35] = \gen_lzc.sel_nodes [15] ? \gen_lzc.index_nodes [79:75] : \gen_lzc.index_nodes [84:80];
  assign \gen_lzc.index_nodes [44:40] = \gen_lzc.sel_nodes [17] ? \gen_lzc.index_nodes [89:85] : \gen_lzc.index_nodes [94:90];
  assign \gen_lzc.index_nodes [49:45] = \gen_lzc.sel_nodes [19] ? \gen_lzc.index_nodes [99:95] : \gen_lzc.index_nodes [104:100];
  assign \gen_lzc.index_nodes [54:50] = \gen_lzc.sel_nodes [21] ? \gen_lzc.index_nodes [109:105] : \gen_lzc.index_nodes [114:110];
  assign \gen_lzc.index_nodes [59:55] = \gen_lzc.sel_nodes [23] ? \gen_lzc.index_nodes [119:115] : \gen_lzc.index_nodes [124:120];
  assign \gen_lzc.index_nodes [64:60] = \gen_lzc.sel_nodes [25] ? \gen_lzc.index_nodes [129:125] : \gen_lzc.index_nodes [134:130];
  assign \gen_lzc.flip_vector.sv2v_autoblock_1.i  = 32'd25;
  assign \gen_lzc.in_tmp  = { in_i[0], in_i[1], in_i[2], in_i[3], in_i[4], in_i[5], in_i[6], in_i[7], in_i[8], in_i[9], in_i[10], in_i[11], in_i[12], in_i[13], in_i[14], in_i[15], in_i[16], in_i[17], in_i[18], in_i[19], in_i[20], in_i[21], in_i[22], in_i[23], in_i[24] };
  assign \gen_lzc.index_lut  = 125'h18bdab49ca307b9ac5a928398a418820;
  assign { \gen_lzc.index_nodes [154:135], \gen_lzc.index_nodes [74:65], \gen_lzc.index_nodes [4:0] } = { 30'h00006018, cnt_o };
  assign { \gen_lzc.sel_nodes [30:27], \gen_lzc.sel_nodes [14:13], \gen_lzc.sel_nodes [6] } = { 3'h0, in_i[0], 1'h0, in_i[0], in_i[0] };
endmodule

module \$paramod\fpnew_rounding\AbsWidth=32'00000000000000000000000000001111 (abs_value_i, sign_i, round_sticky_bits_i, rnd_mode_i, effective_subtraction_i, abs_rounded_o, sign_o, exact_zero_o);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire [1:0] _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  output [14:0] abs_rounded_o;
  wire [14:0] abs_rounded_o;
  input [14:0] abs_value_i;
  wire [14:0] abs_value_i;
  input effective_subtraction_i;
  wire effective_subtraction_i;
  output exact_zero_o;
  wire exact_zero_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input [1:0] round_sticky_bits_i;
  wire [1:0] round_sticky_bits_i;
  wire round_up;
  input sign_i;
  wire sign_i;
  output sign_o;
  wire sign_o;
  assign abs_rounded_o = abs_value_i + round_up;
  assign _01_ = ! abs_value_i;
  assign exact_zero_o = _01_ && _02_;
  assign _04_ = exact_zero_o && effective_subtraction_i;
  assign _05_ = ~ sign_i;
  function [0:0] _22_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _22_ = b[0:0];
      3'b?1?:
        _22_ = b[1:1];
      3'b1??:
        _22_ = b[2:2];
      default:
        _22_ = a;
    endcase
  endfunction
  assign _00_ = _22_(1'hx, { 1'h0, abs_value_i[0], 1'h1 }, { _09_, _07_, _06_ });
  assign _06_ = round_sticky_bits_i == 2'h3;
  assign _07_ = round_sticky_bits_i == 2'h2;
  assign _09_ = | { _08_[1], _02_ };
  assign _02_ = ! round_sticky_bits_i;
  assign _08_[1] = round_sticky_bits_i == 2'h1;
  function [0:0] _28_;
    input [0:0] a;
    input [4:0] b;
    input [4:0] s;
    casez (s) // synopsys parallel_case
      5'b????1:
        _28_ = b[0:0];
      5'b???1?:
        _28_ = b[1:1];
      5'b??1??:
        _28_ = b[2:2];
      5'b?1???:
        _28_ = b[3:3];
      5'b1????:
        _28_ = b[4:4];
      default:
        _28_ = a;
    endcase
  endfunction
  assign round_up = _28_(1'h1, { _00_, 1'h0, _15_, _16_, round_sticky_bits_i[1] }, { _10_, _13_, _03_, _12_, _11_ });
  assign _11_ = rnd_mode_i == 3'h4;
  assign _12_ = rnd_mode_i == 3'h3;
  assign _03_ = rnd_mode_i == 3'h2;
  assign _13_ = rnd_mode_i == 3'h1;
  assign _10_ = ! rnd_mode_i;
  assign _14_ = | round_sticky_bits_i;
  assign _15_ = _14_ ? sign_i : 1'h0;
  assign _16_ = _14_ ? _05_ : 1'h0;
  assign sign_o = _04_ ? _03_ : sign_i;
  assign _08_[0] = _02_;
endmodule

module \$paramod\lzc\WIDTH=32'00000000000000000000000000000100\MODE=1'0 (in_i, cnt_o, empty_o);
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  output empty_o;
  wire empty_o;
  wire [31:0] \gen_lzc.flip_vector.sv2v_autoblock_1.i ;
  wire [3:0] \gen_lzc.in_tmp ;
  wire [7:0] \gen_lzc.index_lut ;
  wire [7:0] \gen_lzc.index_nodes ;
  wire [3:0] \gen_lzc.sel_nodes ;
  input [3:0] in_i;
  wire [3:0] in_i;
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign \gen_lzc.sel_nodes [1] = in_i[0] | in_i[1];
  assign \gen_lzc.sel_nodes [2] = in_i[2] | in_i[3];
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | \gen_lzc.sel_nodes [2];
  assign \gen_lzc.index_nodes [3:2] = in_i[0] ? 2'h0 : 2'h1;
  assign \gen_lzc.index_nodes [5:4] = in_i[2] ? 2'h2 : 2'h3;
  assign cnt_o = \gen_lzc.sel_nodes [1] ? \gen_lzc.index_nodes [3:2] : \gen_lzc.index_nodes [5:4];
  assign \gen_lzc.flip_vector.sv2v_autoblock_1.i  = 32'd4;
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 8'he4;
  assign \gen_lzc.index_nodes [1:0] = cnt_o;
endmodule

module \$paramod\lzc\WIDTH=32'00000000000000000000000000000101\MODE=1'0 (in_i, cnt_o, empty_o);
  output [2:0] cnt_o;
  wire [2:0] cnt_o;
  output empty_o;
  wire empty_o;
  wire [31:0] \gen_lzc.flip_vector.sv2v_autoblock_1.i ;
  wire [4:0] \gen_lzc.in_tmp ;
  wire [14:0] \gen_lzc.index_lut ;
  wire [23:0] \gen_lzc.index_nodes ;
  wire [7:0] \gen_lzc.sel_nodes ;
  input [4:0] in_i;
  wire [4:0] in_i;
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign \gen_lzc.sel_nodes [3] = in_i[0] | in_i[1];
  assign \gen_lzc.sel_nodes [4] = in_i[2] | in_i[3];
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | in_i[4];
  assign \gen_lzc.sel_nodes [1] = \gen_lzc.sel_nodes [3] | \gen_lzc.sel_nodes [4];
  assign \gen_lzc.index_nodes [11:9] = in_i[0] ? 3'h0 : 3'h1;
  assign \gen_lzc.index_nodes [14:12] = in_i[2] ? 3'h2 : 3'h3;
  assign cnt_o = \gen_lzc.sel_nodes [1] ? \gen_lzc.index_nodes [5:3] : \gen_lzc.index_nodes [8:6];
  assign \gen_lzc.index_nodes [5:3] = \gen_lzc.sel_nodes [3] ? \gen_lzc.index_nodes [11:9] : \gen_lzc.index_nodes [14:12];
  assign \gen_lzc.index_nodes [8:6] = in_i[4] ? 3'h4 : 3'h0;
  assign \gen_lzc.flip_vector.sv2v_autoblock_1.i  = 32'd5;
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 15'h4688;
  assign { \gen_lzc.index_nodes [20:15], \gen_lzc.index_nodes [2:0] } = { 6'h04, cnt_o };
  assign { \gen_lzc.sel_nodes [6:5], \gen_lzc.sel_nodes [2] } = { 1'h0, in_i[4], in_i[4] };
endmodule

module FPNewBlackbox(clk_i, rst_ni, operands_i, rnd_mode_i, op_i, op_mod_i, src_fmt_i, dst_fmt_i, int_fmt_i, vectorial_op_i, tag_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, tag_o, out_valid_o, out_ready_i, busy_o);
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  input [2:0] dst_fmt_i;
  wire [2:0] dst_fmt_i;
  input flush_i;
  wire flush_i;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [1:0] int_fmt_i;
  wire [1:0] int_fmt_i;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [47:0] operands_i;
  wire [47:0] operands_i;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  output [15:0] result_o;
  wire [15:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  input [2:0] src_fmt_i;
  wire [2:0] src_fmt_i;
  output [4:0] status_o;
  wire [4:0] status_o;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  input vectorial_op_i;
  wire vectorial_op_i;
  \$paramod$2f2717b41d3d9c8c568e6c272ff3e39c1b6095e7\fpnew_top_21317_11D0A  inst (
    .busy_o(busy_o),
    .clk_i(clk_i),
    .dst_fmt_i(dst_fmt_i),
    .flush_i(flush_i),
    .in_ready_o(in_ready_o),
    .in_valid_i(in_valid_i),
    .int_fmt_i(int_fmt_i),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(operands_i),
    .out_ready_i(out_ready_i),
    .out_valid_o(out_valid_o),
    .result_o(result_o),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .src_fmt_i(src_fmt_i),
    .status_o(status_o),
    .tag_i(tag_i),
    .tag_o(tag_o),
    .vectorial_op_i(vectorial_op_i)
  );
endmodule
