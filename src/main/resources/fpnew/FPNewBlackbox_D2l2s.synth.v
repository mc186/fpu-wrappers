/* Generated by Yosys 0.15+70 (git sha1 48d7a6c47, clang 11.0.1-2 -fPIC -Os) */

module \$paramod$1198b683346e22a416cfc24624090e1fa669579c\fpnew_opgroup_fmt_slice_E368D_75924 (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, op_mod_i, vectorial_op_i, tag_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, tag_o, out_valid_o, out_ready_i, busy_o);
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  output extension_bit_o;
  wire extension_bit_o;
  input flush_i;
  wire flush_i;
  wire \gen_num_lanes[0].active_lane.in_valid ;
  wire [191:0] \gen_num_lanes[0].active_lane.local_operands ;
  wire [63:0] \gen_num_lanes[0].active_lane.op_result ;
  wire [4:0] \gen_num_lanes[0].active_lane.op_status ;
  wire \gen_num_lanes[0].active_lane.out_ready ;
  wire \gen_num_lanes[0].active_lane.out_valid ;
  wire [31:0] \gen_num_lanes[0].active_lane.prepare_input.sv2v_autoblock_1.i ;
  wire [63:0] \gen_num_lanes[0].local_result ;
  wire \gen_num_lanes[0].local_sign ;
  wire \gen_num_lanes[1].active_lane.in_valid ;
  wire [191:0] \gen_num_lanes[1].active_lane.local_operands ;
  wire [63:0] \gen_num_lanes[1].active_lane.op_result ;
  wire [4:0] \gen_num_lanes[1].active_lane.op_status ;
  wire \gen_num_lanes[1].active_lane.out_ready ;
  wire \gen_num_lanes[1].active_lane.out_valid ;
  wire [31:0] \gen_num_lanes[1].active_lane.prepare_input.sv2v_autoblock_1.i ;
  wire [63:0] \gen_num_lanes[1].local_result ;
  wire \gen_num_lanes[1].local_sign ;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [2:0] is_boxed_i;
  wire [2:0] is_boxed_i;
  wire [1:0] lane_busy;
  wire [19:0] lane_class_mask;
  wire [1:0] lane_ext_bit;
  wire [1:0] lane_in_ready;
  wire [1:0] lane_is_class;
  wire [1:0] lane_out_valid;
  wire [9:0] lane_status;
  wire [3:0] lane_tags;
  wire [1:0] lane_vectorial;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [383:0] operands_i;
  wire [383:0] operands_i;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  wire [31:0] \output_processing.sv2v_autoblock_2.i ;
  wire [4:0] \output_processing.temp_status ;
  wire result_is_class;
  wire result_is_vector;
  output [127:0] result_o;
  wire [127:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  wire [127:0] slice_regular_result;
  wire [127:0] slice_result;
  wire [127:0] slice_vec_class_result;
  output [4:0] status_o;
  wire [4:0] status_o;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  wire vectorial_op;
  input vectorial_op_i;
  wire vectorial_op_i;
  assign \gen_num_lanes[1].active_lane.in_valid  = in_valid_i & vectorial_op_i;
  assign \gen_num_lanes[1].active_lane.out_ready  = out_ready_i & result_is_vector;
  assign lane_out_valid[1] = \gen_num_lanes[1].active_lane.out_valid  & result_is_vector;
  assign status_o = lane_status[4:0] | lane_status[9:5];
  assign busy_o = | lane_busy;
  assign \gen_num_lanes[0].local_result  = \gen_num_lanes[0].active_lane.out_valid  ? \gen_num_lanes[0].active_lane.op_result  : { extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o };
  assign \gen_num_lanes[1].local_result  = lane_out_valid[1] ? \gen_num_lanes[1].active_lane.op_result  : { extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o };
  assign lane_status[4:0] = \gen_num_lanes[0].active_lane.out_valid  ? \gen_num_lanes[0].active_lane.op_status  : 5'h00;
  assign lane_status[9:5] = lane_out_valid[1] ? \gen_num_lanes[1].active_lane.op_status  : 5'h00;
  \$paramod$6313957f3f8e5ac0edbd3470c2d5deb9a757f657\fpnew_fma_FC83A_5615B  \gen_num_lanes[0].active_lane.lane_instance.i_fma  (
    .aux_i(vectorial_op_i),
    .aux_o(result_is_vector),
    .busy_o(lane_busy[0]),
    .clk_i(clk_i),
    .extension_bit_o(extension_bit_o),
    .flush_i(flush_i),
    .in_ready_o(in_ready_o),
    .in_valid_i(in_valid_i),
    .is_boxed_i(is_boxed_i),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i({ operands_i[319:256], operands_i[191:128], operands_i[63:0] }),
    .out_ready_i(out_ready_i),
    .out_valid_o(\gen_num_lanes[0].active_lane.out_valid ),
    .result_o(\gen_num_lanes[0].active_lane.op_result ),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .status_o(\gen_num_lanes[0].active_lane.op_status ),
    .tag_i(tag_i),
    .tag_o(tag_o)
  );
  \$paramod$6313957f3f8e5ac0edbd3470c2d5deb9a757f657\fpnew_fma_FC83A_5615B  \gen_num_lanes[1].active_lane.lane_instance.i_fma  (
    .aux_i(vectorial_op_i),
    .aux_o(lane_vectorial[1]),
    .busy_o(lane_busy[1]),
    .clk_i(clk_i),
    .extension_bit_o(lane_ext_bit[1]),
    .flush_i(flush_i),
    .in_ready_o(lane_in_ready[1]),
    .in_valid_i(\gen_num_lanes[1].active_lane.in_valid ),
    .is_boxed_i(is_boxed_i),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i({ operands_i[383:320], operands_i[255:192], operands_i[127:64] }),
    .out_ready_i(\gen_num_lanes[1].active_lane.out_ready ),
    .out_valid_o(\gen_num_lanes[1].active_lane.out_valid ),
    .result_o(\gen_num_lanes[1].active_lane.op_result ),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .status_o(\gen_num_lanes[1].active_lane.op_status ),
    .tag_i(tag_i),
    .tag_o(lane_tags[3:2])
  );
  assign \gen_num_lanes[0].active_lane.in_valid  = in_valid_i;
  assign \gen_num_lanes[0].active_lane.local_operands  = { operands_i[319:256], operands_i[191:128], operands_i[63:0] };
  assign \gen_num_lanes[0].active_lane.out_ready  = out_ready_i;
  assign \gen_num_lanes[0].active_lane.prepare_input.sv2v_autoblock_1.i  = 32'd3;
  assign \gen_num_lanes[0].local_sign  = 1'h1;
  assign \gen_num_lanes[1].active_lane.local_operands  = { operands_i[383:320], operands_i[255:192], operands_i[127:64] };
  assign \gen_num_lanes[1].active_lane.prepare_input.sv2v_autoblock_1.i  = 32'd3;
  assign \gen_num_lanes[1].local_sign  = 1'h1;
  assign lane_class_mask = 20'h00401;
  assign lane_ext_bit[0] = extension_bit_o;
  assign lane_in_ready[0] = in_ready_o;
  assign lane_is_class = 2'h0;
  assign lane_out_valid[0] = \gen_num_lanes[0].active_lane.out_valid ;
  assign lane_tags[1:0] = tag_o;
  assign lane_vectorial[0] = result_is_vector;
  assign out_valid_o = \gen_num_lanes[0].active_lane.out_valid ;
  assign \output_processing.sv2v_autoblock_2.i  = 32'd2;
  assign \output_processing.temp_status  = status_o;
  assign result_is_class = 1'h0;
  assign result_o = { \gen_num_lanes[1].local_result , \gen_num_lanes[0].local_result  };
  assign slice_regular_result = { \gen_num_lanes[1].local_result , \gen_num_lanes[0].local_result  };
  assign slice_result = { \gen_num_lanes[1].local_result , \gen_num_lanes[0].local_result  };
  assign slice_vec_class_result = 128'h00000000000000000000000000008181;
  assign vectorial_op = vectorial_op_i;
endmodule

module \$paramod$2bcb15ce6406b3850f0986a4bea467deba161cde\fpnew_opgroup_block_A94B6_B7406 (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, op_mod_i, src_fmt_i, dst_fmt_i, int_fmt_i, vectorial_op_i, tag_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, tag_o, out_valid_o, out_ready_i
, busy_o);
  wire _0_;
  wire [135:0] arbiter_output;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  input [2:0] dst_fmt_i;
  wire [2:0] dst_fmt_i;
  output extension_bit_o;
  wire extension_bit_o;
  input flush_i;
  wire flush_i;
  wire [4:0] fmt_busy;
  wire [4:0] fmt_in_ready;
  wire [4:0] fmt_out_ready;
  wire [4:0] fmt_out_valid;
  wire [679:0] fmt_outputs;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [1:0] int_fmt_i;
  wire [1:0] int_fmt_i;
  input [9:0] is_boxed_i;
  wire [9:0] is_boxed_i;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [255:0] operands_i;
  wire [255:0] operands_i;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  output [127:0] result_o;
  wire [127:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  input [2:0] src_fmt_i;
  wire [2:0] src_fmt_i;
  output [4:0] status_o;
  wire [4:0] status_o;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  input vectorial_op_i;
  wire vectorial_op_i;
  assign in_ready_o = in_valid_i & _0_;
  wire [4:0] _3_ = 5'h00;
  assign _0_ = _3_[dst_fmt_i +: 1];
  \$paramod$62b97f2c24fbd0ec64efd8c0255d5867594e9cd9\rr_arb_tree_52163_F264E  i_arbiter (
    .clk_i(clk_i),
    .data_i(680'hfffffffffffffffffffffffffffffffffdfffffffffffffffffffffffffffffffffdfffffffffffffffffffffffffffffffffdfffffffffffffffffffffffffffffffffdfffffffffffffffffffffffffffffffffd),
    .data_o(arbiter_output),
    .flush_i(flush_i),
    .gnt_i(out_ready_i),
    .gnt_o(fmt_out_ready),
    .req_i(5'h00),
    .req_o(out_valid_o),
    .rr_i(3'h0),
    .rst_ni(rst_ni)
  );
  assign busy_o = 1'h0;
  assign extension_bit_o = arbiter_output[2];
  assign fmt_busy = 5'h00;
  assign fmt_in_ready = 5'h00;
  assign fmt_out_valid = 5'h00;
  assign fmt_outputs = 680'hfffffffffffffffffffffffffffffffffdfffffffffffffffffffffffffffffffffdfffffffffffffffffffffffffffffffffdfffffffffffffffffffffffffffffffffdfffffffffffffffffffffffffffffffffd;
  assign result_o = arbiter_output[135:8];
  assign status_o = arbiter_output[7:3];
  assign tag_o = arbiter_output[1:0];
endmodule

module \$paramod$47b04f1e7881f160e7da057470de6966c6afa7a0\fpnew_classifier (operands_i, is_boxed_i, info_o);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire \gen_num_values[0].is_boxed ;
  wire \gen_num_values[0].is_inf ;
  wire \gen_num_values[0].is_nan ;
  wire \gen_num_values[0].is_normal ;
  wire \gen_num_values[0].is_quiet ;
  wire \gen_num_values[0].is_signalling ;
  wire \gen_num_values[0].is_subnormal ;
  wire \gen_num_values[0].is_zero ;
  wire [63:0] \gen_num_values[0].value ;
  wire \gen_num_values[1].is_boxed ;
  wire \gen_num_values[1].is_inf ;
  wire \gen_num_values[1].is_nan ;
  wire \gen_num_values[1].is_normal ;
  wire \gen_num_values[1].is_quiet ;
  wire \gen_num_values[1].is_signalling ;
  wire \gen_num_values[1].is_subnormal ;
  wire \gen_num_values[1].is_zero ;
  wire [63:0] \gen_num_values[1].value ;
  wire \gen_num_values[2].is_boxed ;
  wire \gen_num_values[2].is_inf ;
  wire \gen_num_values[2].is_nan ;
  wire \gen_num_values[2].is_normal ;
  wire \gen_num_values[2].is_quiet ;
  wire \gen_num_values[2].is_signalling ;
  wire \gen_num_values[2].is_subnormal ;
  wire \gen_num_values[2].is_zero ;
  wire [63:0] \gen_num_values[2].value ;
  output [23:0] info_o;
  wire [23:0] info_o;
  input [2:0] is_boxed_i;
  wire [2:0] is_boxed_i;
  input [191:0] operands_i;
  wire [191:0] operands_i;
  assign _000_ = ! operands_i[62:52];
  assign _002_ = ! operands_i[126:116];
  assign _004_ = ! operands_i[190:180];
  assign _001_ = ! operands_i[51:0];
  assign _003_ = ! operands_i[115:64];
  assign _005_ = ! operands_i[179:128];
  assign _006_ = operands_i[62:52] == 11'h7ff;
  assign _007_ = operands_i[126:116] == 11'h7ff;
  assign _008_ = operands_i[190:180] == 11'h7ff;
  assign _009_ = ~ operands_i[51];
  assign _010_ = ~ operands_i[115];
  assign _011_ = ~ operands_i[179];
  assign _012_ = is_boxed_i[0] && _036_;
  assign \gen_num_values[0].is_normal  = _012_ && _037_;
  assign _013_ = is_boxed_i[1] && _038_;
  assign \gen_num_values[1].is_normal  = _013_ && _039_;
  assign _014_ = is_boxed_i[2] && _040_;
  assign \gen_num_values[2].is_normal  = _014_ && _041_;
  assign \gen_num_values[0].is_zero  = _015_ && _001_;
  assign \gen_num_values[1].is_zero  = _016_ && _003_;
  assign \gen_num_values[2].is_zero  = _017_ && _005_;
  assign _015_ = is_boxed_i[0] && _000_;
  assign \gen_num_values[0].is_subnormal  = _015_ && _027_;
  assign _016_ = is_boxed_i[1] && _002_;
  assign \gen_num_values[1].is_subnormal  = _016_ && _028_;
  assign _017_ = is_boxed_i[2] && _004_;
  assign \gen_num_values[2].is_subnormal  = _017_ && _029_;
  assign _018_ = _006_ && _001_;
  assign \gen_num_values[0].is_inf  = is_boxed_i[0] && _018_;
  assign _019_ = _007_ && _003_;
  assign \gen_num_values[1].is_inf  = is_boxed_i[1] && _019_;
  assign _020_ = _008_ && _005_;
  assign \gen_num_values[2].is_inf  = is_boxed_i[2] && _020_;
  assign _021_ = _006_ && _042_;
  assign _022_ = _007_ && _043_;
  assign _023_ = _008_ && _044_;
  assign _024_ = is_boxed_i[0] && \gen_num_values[0].is_nan ;
  assign \gen_num_values[0].is_signalling  = _024_ && _009_;
  assign _025_ = is_boxed_i[1] && \gen_num_values[1].is_nan ;
  assign \gen_num_values[1].is_signalling  = _025_ && _010_;
  assign _026_ = is_boxed_i[2] && \gen_num_values[2].is_nan ;
  assign \gen_num_values[2].is_signalling  = _026_ && _011_;
  assign \gen_num_values[0].is_quiet  = \gen_num_values[0].is_nan  && _033_;
  assign \gen_num_values[1].is_quiet  = \gen_num_values[1].is_nan  && _034_;
  assign \gen_num_values[2].is_quiet  = \gen_num_values[2].is_nan  && _035_;
  assign _027_ = ! \gen_num_values[0].is_zero ;
  assign _028_ = ! \gen_num_values[1].is_zero ;
  assign _029_ = ! \gen_num_values[2].is_zero ;
  assign _030_ = ! is_boxed_i[0];
  assign _031_ = ! is_boxed_i[1];
  assign _032_ = ! is_boxed_i[2];
  assign _033_ = ! \gen_num_values[0].is_signalling ;
  assign _034_ = ! \gen_num_values[1].is_signalling ;
  assign _035_ = ! \gen_num_values[2].is_signalling ;
  assign \gen_num_values[0].is_nan  = _030_ || _021_;
  assign \gen_num_values[1].is_nan  = _031_ || _022_;
  assign \gen_num_values[2].is_nan  = _032_ || _023_;
  assign _036_ = | operands_i[62:52];
  assign _037_ = operands_i[62:52] != 11'h7ff;
  assign _038_ = | operands_i[126:116];
  assign _039_ = operands_i[126:116] != 11'h7ff;
  assign _040_ = | operands_i[190:180];
  assign _041_ = operands_i[190:180] != 11'h7ff;
  assign _042_ = | operands_i[51:0];
  assign _043_ = | operands_i[115:64];
  assign _044_ = | operands_i[179:128];
  assign \gen_num_values[0].is_boxed  = is_boxed_i[0];
  assign \gen_num_values[0].value  = operands_i[63:0];
  assign \gen_num_values[1].is_boxed  = is_boxed_i[1];
  assign \gen_num_values[1].value  = operands_i[127:64];
  assign \gen_num_values[2].is_boxed  = is_boxed_i[2];
  assign \gen_num_values[2].value  = operands_i[191:128];
  assign info_o = { \gen_num_values[2].is_normal , \gen_num_values[2].is_subnormal , \gen_num_values[2].is_zero , \gen_num_values[2].is_inf , \gen_num_values[2].is_nan , \gen_num_values[2].is_signalling , \gen_num_values[2].is_quiet , is_boxed_i[2], \gen_num_values[1].is_normal , \gen_num_values[1].is_subnormal , \gen_num_values[1].is_zero , \gen_num_values[1].is_inf , \gen_num_values[1].is_nan , \gen_num_values[1].is_signalling , \gen_num_values[1].is_quiet , is_boxed_i[1], \gen_num_values[0].is_normal , \gen_num_values[0].is_subnormal , \gen_num_values[0].is_zero , \gen_num_values[0].is_inf , \gen_num_values[0].is_nan , \gen_num_values[0].is_signalling , \gen_num_values[0].is_quiet , is_boxed_i[0] };
endmodule

module \$paramod$4dffaaa76975fa9a810a1a53bbd409e4982e6ede\rr_arb_tree_DE4E6_76EE6 (clk_i, rst_ni, flush_i, rr_i, req_i, gnt_o, data_i, req_o, gnt_i, data_o, idx_o);
  wire [1:0] _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  input clk_i;
  wire clk_i;
  input [539:0] data_i;
  wire [539:0] data_i;
  output [134:0] data_o;
  wire [134:0] data_o;
  input flush_i;
  wire flush_i;
  wire [404:0] \gen_arbiter.data_nodes ;
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  wire [1:0] \gen_arbiter.gen_int_rr.rr_d ;
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  wire [2:0] \gen_arbiter.gnt_nodes ;
  wire [5:0] \gen_arbiter.index_nodes ;
  wire [3:0] \gen_arbiter.req_d ;
  wire [2:0] \gen_arbiter.req_nodes ;
  reg [1:0] \gen_arbiter.rr_q ;
  input gnt_i;
  wire gnt_i;
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  output [1:0] idx_o;
  wire [1:0] idx_o;
  input [3:0] req_i;
  wire [3:0] req_i;
  output req_o;
  wire req_o;
  input [1:0] rr_i;
  wire [1:0] rr_i;
  input rst_ni;
  wire rst_ni;
  wire [1:0] \sv2v_cast_71D7F$func$FPNewBlackbox_D2l2s.preprocessed.v:327$476.inp ;
  wire [1:0] \sv2v_cast_71D7F$func$FPNewBlackbox_D2l2s.preprocessed.v:327$477.inp ;
  wire [1:0] \sv2v_cast_71D7F$func$FPNewBlackbox_D2l2s.preprocessed.v:347$474.inp ;
  wire [1:0] \sv2v_cast_71D7F$func$FPNewBlackbox_D2l2s.preprocessed.v:347$475.inp ;
  assign _01_ = req_i[1] & \gen_arbiter.rr_q [0];
  assign _02_ = req_i[3] & \gen_arbiter.rr_q [0];
  assign gnt_o[0] = \gen_arbiter.gnt_nodes [1] & _16_;
  assign gnt_o[2] = \gen_arbiter.gnt_nodes [2] & _17_;
  assign gnt_o[1] = \gen_arbiter.gnt_nodes [1] & \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign gnt_o[3] = \gen_arbiter.gnt_nodes [2] & \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  assign _03_ = \gen_arbiter.req_nodes [2] & \gen_arbiter.rr_q [1];
  assign \gen_arbiter.gnt_nodes [1] = gnt_i & _19_;
  assign \gen_arbiter.gnt_nodes [2] = gnt_i & \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.rr_q  <= 2'h0;
    else if (_04_) \gen_arbiter.rr_q  <= _00_;
  assign _04_ = | { _13_, flush_i };
  assign _05_ = 32'd0 > \gen_arbiter.rr_q ;
  assign _06_ = 32'd1 > \gen_arbiter.rr_q ;
  assign _07_ = 32'd2 > \gen_arbiter.rr_q ;
  assign _08_ = 32'd3 > \gen_arbiter.rr_q ;
  assign _09_ = 32'd0 <= \gen_arbiter.rr_q ;
  assign _10_ = 32'd1 <= \gen_arbiter.rr_q ;
  assign _11_ = 32'd2 <= \gen_arbiter.rr_q ;
  assign _12_ = 32'd3 <= \gen_arbiter.rr_q ;
  assign _13_ = gnt_i && req_o;
  assign _14_ = ~ req_i[0];
  assign _15_ = ~ req_i[2];
  assign _16_ = ~ \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign _17_ = ~ \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  assign _18_ = ~ \gen_arbiter.req_nodes [1];
  assign _19_ = ~ \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [1] = req_i[0] | req_i[1];
  assign \gen_arbiter.req_nodes [2] = req_i[2] | req_i[3];
  assign \gen_arbiter.gen_levels[1].gen_level[0].sel  = _14_ | _01_;
  assign \gen_arbiter.gen_levels[1].gen_level[1].sel  = _15_ | _02_;
  assign req_o = \gen_arbiter.req_nodes [1] | \gen_arbiter.req_nodes [2];
  assign \gen_arbiter.gen_levels[0].gen_level[0].sel  = _18_ | _03_;
  assign _00_ = flush_i ? 2'h0 : \gen_arbiter.gen_int_rr.rr_d ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = _05_ ? req_i[0] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1] = _06_ ? req_i[1] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2] = _07_ ? req_i[2] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3] = _08_ ? req_i[3] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = _09_ ? req_i[0] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1] = _10_ ? req_i[1] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2] = _11_ ? req_i[2] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3] = _12_ ? req_i[3] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  = \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty  ? \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx  : \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  assign \gen_arbiter.gen_int_rr.rr_d  = _13_ ? \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  : 2'hx;
  assign \gen_arbiter.data_nodes [269:135] = \gen_arbiter.gen_levels[1].gen_level[0].sel  ? data_i[269:135] : data_i[134:0];
  assign \gen_arbiter.data_nodes [404:270] = \gen_arbiter.gen_levels[1].gen_level[1].sel  ? data_i[539:405] : data_i[404:270];
  assign idx_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? { 1'h1, \gen_arbiter.gen_levels[1].gen_level[1].sel  } : { 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  };
  assign data_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? \gen_arbiter.data_nodes [404:270] : \gen_arbiter.data_nodes [269:135];
  \$paramod\lzc\WIDTH=32'00000000000000000000000000000100\MODE=1'0  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask )
  );
  \$paramod\lzc\WIDTH=32'00000000000000000000000000000100\MODE=1'0  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask )
  );
  assign \gen_arbiter.data_nodes [134:0] = data_o;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.index_nodes  = { 1'h0, \gen_arbiter.gen_levels[1].gen_level[1].sel , 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel , idx_o };
  assign \gen_arbiter.req_d  = req_i;
  assign \gen_arbiter.req_nodes [0] = req_o;
  assign \sv2v_cast_71D7F$func$FPNewBlackbox_D2l2s.preprocessed.v:327$476.inp  = 2'hx;
  assign \sv2v_cast_71D7F$func$FPNewBlackbox_D2l2s.preprocessed.v:327$477.inp  = 2'hx;
  assign \sv2v_cast_71D7F$func$FPNewBlackbox_D2l2s.preprocessed.v:347$474.inp  = 2'hx;
  assign \sv2v_cast_71D7F$func$FPNewBlackbox_D2l2s.preprocessed.v:347$475.inp  = 2'hx;
endmodule

module \$paramod$511dce93d93831b8dd0fec36634d8b20a0fa90c1\fpnew_top_21317_11D0A (clk_i, rst_ni, operands_i, rnd_mode_i, op_i, op_mod_i, src_fmt_i, dst_fmt_i, int_fmt_i, vectorial_op_i, tag_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, tag_o, out_valid_o, out_ready_i, busy_o);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire [4:0] _16_;
  wire _17_;
  wire [1:0] _18_;
  wire _19_;
  wire [3:0] _20_;
  wire _21_;
  wire _22_;
  wire [134:0] arbiter_output;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  input [2:0] dst_fmt_i;
  wire [2:0] dst_fmt_i;
  input flush_i;
  wire flush_i;
  wire [3:0] \fpnew_pkg_get_opgroup$func$FPNewBlackbox_D2l2s.preprocessed.v:7827$199.op ;
  wire [1:0] \fpnew_pkg_get_opgroup$func$FPNewBlackbox_D2l2s.preprocessed.v:7827$41.$result ;
  wire [3:0] \fpnew_pkg_get_opgroup$func$FPNewBlackbox_D2l2s.preprocessed.v:7876$215.op ;
  wire [3:0] \fpnew_pkg_get_opgroup$func$FPNewBlackbox_D2l2s.preprocessed.v:7876$231.op ;
  wire [3:0] \fpnew_pkg_get_opgroup$func$FPNewBlackbox_D2l2s.preprocessed.v:7876$247.op ;
  wire [3:0] \fpnew_pkg_get_opgroup$func$FPNewBlackbox_D2l2s.preprocessed.v:7876$263.op ;
  wire \gen_operation_groups[0].in_valid ;
  wire [14:0] \gen_operation_groups[0].input_boxed ;
  wire [31:0] \gen_operation_groups[0].slice_inputs.sv2v_autoblock_1.fmt ;
  wire \gen_operation_groups[1].in_valid ;
  wire [9:0] \gen_operation_groups[1].input_boxed ;
  wire [31:0] \gen_operation_groups[1].slice_inputs.sv2v_autoblock_1.fmt ;
  wire \gen_operation_groups[2].in_valid ;
  wire [9:0] \gen_operation_groups[2].input_boxed ;
  wire [31:0] \gen_operation_groups[2].slice_inputs.sv2v_autoblock_1.fmt ;
  wire \gen_operation_groups[3].in_valid ;
  wire [14:0] \gen_operation_groups[3].input_boxed ;
  wire [31:0] \gen_operation_groups[3].slice_inputs.sv2v_autoblock_1.fmt ;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [1:0] int_fmt_i;
  wire [1:0] int_fmt_i;
  wire [14:0] is_boxed;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [383:0] operands_i;
  wire [383:0] operands_i;
  wire [3:0] opgrp_busy;
  wire [3:0] opgrp_ext;
  wire [3:0] opgrp_in_ready;
  wire [3:0] opgrp_out_ready;
  wire [3:0] opgrp_out_valid;
  wire [539:0] opgrp_outputs;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  output [127:0] result_o;
  wire [127:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  input [2:0] src_fmt_i;
  wire [2:0] src_fmt_i;
  output [4:0] status_o;
  wire [4:0] status_o;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  input vectorial_op_i;
  wire vectorial_op_i;
  assign in_ready_o = in_valid_i & _22_;
  assign \gen_operation_groups[0].in_valid  = in_valid_i & _12_;
  assign \gen_operation_groups[1].in_valid  = in_valid_i & _13_;
  assign \gen_operation_groups[2].in_valid  = in_valid_i & _14_;
  assign \gen_operation_groups[3].in_valid  = in_valid_i & _15_;
  assign _00_ = operands_i[127:32] == 96'hffffffffffffffffffffffff;
  assign _01_ = operands_i[255:160] == 96'hffffffffffffffffffffffff;
  assign _02_ = operands_i[383:288] == 96'hffffffffffffffffffffffff;
  assign _03_ = operands_i[127:64] == 64'hffffffffffffffff;
  assign _04_ = operands_i[255:192] == 64'hffffffffffffffff;
  assign _05_ = operands_i[383:320] == 64'hffffffffffffffff;
  assign _09_ = operands_i[127:8] == 120'hffffffffffffffffffffffffffffff;
  assign _10_ = operands_i[255:136] == 120'hffffffffffffffffffffffffffffff;
  assign _11_ = operands_i[383:264] == 120'hffffffffffffffffffffffffffffff;
  assign _06_ = operands_i[127:16] == 112'hffffffffffffffffffffffffffff;
  assign _07_ = operands_i[255:144] == 112'hffffffffffffffffffffffffffff;
  assign _08_ = operands_i[383:272] == 112'hffffffffffffffffffffffffffff;
  assign _12_ = ! \fpnew_pkg_get_opgroup$func$FPNewBlackbox_D2l2s.preprocessed.v:7827$41.$result ;
  assign _13_ = \fpnew_pkg_get_opgroup$func$FPNewBlackbox_D2l2s.preprocessed.v:7827$41.$result  == 2'h1;
  assign _14_ = \fpnew_pkg_get_opgroup$func$FPNewBlackbox_D2l2s.preprocessed.v:7827$41.$result  == 2'h2;
  assign _15_ = \fpnew_pkg_get_opgroup$func$FPNewBlackbox_D2l2s.preprocessed.v:7827$41.$result  == 2'h3;
  assign _17_ = | _16_;
  assign _19_ = | _18_;
  function [1:0] _46_;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _46_ = b[1:0];
      3'b?1?:
        _46_ = b[3:2];
      3'b1??:
        _46_ = b[5:4];
      default:
        _46_ = a;
    endcase
  endfunction
  assign \fpnew_pkg_get_opgroup$func$FPNewBlackbox_D2l2s.preprocessed.v:7827$41.$result  = _46_(2'h2, 6'h07, { _21_, _19_, _17_ });
  assign _21_ = | _20_;
  assign _16_[0] = op_i == 4'ha;
  assign _16_[1] = op_i == 4'hb;
  assign _16_[2] = op_i == 4'hc;
  assign _16_[3] = op_i == 4'hd;
  assign _16_[4] = op_i == 4'he;
  assign _18_[0] = op_i == 4'h4;
  assign _18_[1] = op_i == 4'h5;
  assign _20_[0] = ! op_i;
  assign _20_[1] = op_i == 4'h1;
  assign _20_[2] = op_i == 4'h2;
  assign _20_[3] = op_i == 4'h3;
  assign busy_o = | opgrp_busy;
  wire [3:0] _73_ = opgrp_in_ready;
  assign _22_ = _73_[\fpnew_pkg_get_opgroup$func$FPNewBlackbox_D2l2s.preprocessed.v:7827$41.$result  +: 1];
  assign \gen_operation_groups[0].input_boxed [0] = vectorial_op_i ? 1'h1 : _00_;
  assign \gen_operation_groups[0].input_boxed [1] = vectorial_op_i ? 1'h1 : _01_;
  assign \gen_operation_groups[0].input_boxed [2] = vectorial_op_i ? 1'h1 : _02_;
  assign \gen_operation_groups[0].input_boxed [3] = vectorial_op_i ? 1'h1 : _03_;
  assign \gen_operation_groups[0].input_boxed [4] = vectorial_op_i ? 1'h1 : _04_;
  assign \gen_operation_groups[0].input_boxed [5] = vectorial_op_i ? 1'h1 : _05_;
  assign \gen_operation_groups[0].input_boxed [9] = vectorial_op_i ? 1'h1 : _09_;
  assign \gen_operation_groups[0].input_boxed [10] = vectorial_op_i ? 1'h1 : _10_;
  assign \gen_operation_groups[0].input_boxed [11] = vectorial_op_i ? 1'h1 : _11_;
  assign \gen_operation_groups[0].input_boxed [12] = vectorial_op_i ? 1'h1 : _06_;
  assign \gen_operation_groups[0].input_boxed [13] = vectorial_op_i ? 1'h1 : _07_;
  assign \gen_operation_groups[0].input_boxed [14] = vectorial_op_i ? 1'h1 : _08_;
  \$paramod$c52c45561b827eec44f222fe27935e571607c539\fpnew_opgroup_block_A94B6_B7406  \gen_operation_groups[0].i_opgroup_block  (
    .busy_o(opgrp_busy[0]),
    .clk_i(clk_i),
    .dst_fmt_i(dst_fmt_i),
    .extension_bit_o(opgrp_ext[0]),
    .flush_i(flush_i),
    .in_ready_o(opgrp_in_ready[0]),
    .in_valid_i(\gen_operation_groups[0].in_valid ),
    .int_fmt_i(int_fmt_i),
    .is_boxed_i({ \gen_operation_groups[0].input_boxed [14:9], \gen_operation_groups[0].input_boxed [14:12], \gen_operation_groups[0].input_boxed [5:0] }),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(operands_i),
    .out_ready_i(opgrp_out_ready[0]),
    .out_valid_o(opgrp_out_valid[0]),
    .result_o(opgrp_outputs[134:7]),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .src_fmt_i(src_fmt_i),
    .status_o(opgrp_outputs[6:2]),
    .tag_i(tag_i),
    .tag_o(opgrp_outputs[1:0]),
    .vectorial_op_i(vectorial_op_i)
  );
  \$paramod$2bcb15ce6406b3850f0986a4bea467deba161cde\fpnew_opgroup_block_A94B6_B7406  \gen_operation_groups[1].i_opgroup_block  (
    .busy_o(opgrp_busy[1]),
    .clk_i(clk_i),
    .dst_fmt_i(dst_fmt_i),
    .extension_bit_o(opgrp_ext[1]),
    .flush_i(flush_i),
    .in_ready_o(opgrp_in_ready[1]),
    .in_valid_i(\gen_operation_groups[1].in_valid ),
    .int_fmt_i(int_fmt_i),
    .is_boxed_i({ \gen_operation_groups[0].input_boxed [13:12], \gen_operation_groups[0].input_boxed [10:9], \gen_operation_groups[0].input_boxed [13:12], \gen_operation_groups[0].input_boxed [4:3], \gen_operation_groups[0].input_boxed [1:0] }),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(operands_i[255:0]),
    .out_ready_i(opgrp_out_ready[1]),
    .out_valid_o(opgrp_out_valid[1]),
    .result_o(opgrp_outputs[269:142]),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .src_fmt_i(src_fmt_i),
    .status_o(opgrp_outputs[141:137]),
    .tag_i(tag_i),
    .tag_o(opgrp_outputs[136:135]),
    .vectorial_op_i(vectorial_op_i)
  );
  \$paramod$cdc7ff1e79a7bbede175978d94459e7cb665f71e\fpnew_opgroup_block_A94B6_B7406  \gen_operation_groups[2].i_opgroup_block  (
    .busy_o(opgrp_busy[2]),
    .clk_i(clk_i),
    .dst_fmt_i(dst_fmt_i),
    .extension_bit_o(opgrp_ext[2]),
    .flush_i(flush_i),
    .in_ready_o(opgrp_in_ready[2]),
    .in_valid_i(\gen_operation_groups[2].in_valid ),
    .int_fmt_i(int_fmt_i),
    .is_boxed_i({ \gen_operation_groups[0].input_boxed [13:12], \gen_operation_groups[0].input_boxed [10:9], \gen_operation_groups[0].input_boxed [13:12], \gen_operation_groups[0].input_boxed [4:3], \gen_operation_groups[0].input_boxed [1:0] }),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(operands_i[255:0]),
    .out_ready_i(opgrp_out_ready[2]),
    .out_valid_o(opgrp_out_valid[2]),
    .result_o(opgrp_outputs[404:277]),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .src_fmt_i(src_fmt_i),
    .status_o(opgrp_outputs[276:272]),
    .tag_i(tag_i),
    .tag_o(opgrp_outputs[271:270]),
    .vectorial_op_i(vectorial_op_i)
  );
  \$paramod$784774ac2bb97554e782849b61f33f38c24af425\fpnew_opgroup_block_A94B6_B7406  \gen_operation_groups[3].i_opgroup_block  (
    .busy_o(opgrp_busy[3]),
    .clk_i(clk_i),
    .dst_fmt_i(dst_fmt_i),
    .extension_bit_o(opgrp_ext[3]),
    .flush_i(flush_i),
    .in_ready_o(opgrp_in_ready[3]),
    .in_valid_i(\gen_operation_groups[3].in_valid ),
    .int_fmt_i(int_fmt_i),
    .is_boxed_i({ \gen_operation_groups[0].input_boxed [14:9], \gen_operation_groups[0].input_boxed [14:12], \gen_operation_groups[0].input_boxed [5:0] }),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(operands_i),
    .out_ready_i(opgrp_out_ready[3]),
    .out_valid_o(opgrp_out_valid[3]),
    .result_o(opgrp_outputs[539:412]),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .src_fmt_i(src_fmt_i),
    .status_o(opgrp_outputs[411:407]),
    .tag_i(tag_i),
    .tag_o(opgrp_outputs[406:405]),
    .vectorial_op_i(vectorial_op_i)
  );
  \$paramod$4dffaaa76975fa9a810a1a53bbd409e4982e6ede\rr_arb_tree_DE4E6_76EE6  i_arbiter (
    .clk_i(clk_i),
    .data_i(opgrp_outputs),
    .data_o(arbiter_output),
    .flush_i(flush_i),
    .gnt_i(out_ready_i),
    .gnt_o(opgrp_out_ready),
    .req_i(opgrp_out_valid),
    .req_o(out_valid_o),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign \fpnew_pkg_get_opgroup$func$FPNewBlackbox_D2l2s.preprocessed.v:7827$199.op  = 4'hx;
  assign \fpnew_pkg_get_opgroup$func$FPNewBlackbox_D2l2s.preprocessed.v:7876$215.op  = 4'hx;
  assign \fpnew_pkg_get_opgroup$func$FPNewBlackbox_D2l2s.preprocessed.v:7876$231.op  = 4'hx;
  assign \fpnew_pkg_get_opgroup$func$FPNewBlackbox_D2l2s.preprocessed.v:7876$247.op  = 4'hx;
  assign \fpnew_pkg_get_opgroup$func$FPNewBlackbox_D2l2s.preprocessed.v:7876$263.op  = 4'hx;
  assign \gen_operation_groups[0].input_boxed [8:6] = \gen_operation_groups[0].input_boxed [14:12];
  assign \gen_operation_groups[0].slice_inputs.sv2v_autoblock_1.fmt  = 32'd5;
  assign \gen_operation_groups[1].input_boxed  = { \gen_operation_groups[0].input_boxed [13:12], \gen_operation_groups[0].input_boxed [10:9], \gen_operation_groups[0].input_boxed [13:12], \gen_operation_groups[0].input_boxed [4:3], \gen_operation_groups[0].input_boxed [1:0] };
  assign \gen_operation_groups[1].slice_inputs.sv2v_autoblock_1.fmt  = 32'd5;
  assign \gen_operation_groups[2].input_boxed  = { \gen_operation_groups[0].input_boxed [13:12], \gen_operation_groups[0].input_boxed [10:9], \gen_operation_groups[0].input_boxed [13:12], \gen_operation_groups[0].input_boxed [4:3], \gen_operation_groups[0].input_boxed [1:0] };
  assign \gen_operation_groups[2].slice_inputs.sv2v_autoblock_1.fmt  = 32'd5;
  assign \gen_operation_groups[3].input_boxed  = { \gen_operation_groups[0].input_boxed [14:9], \gen_operation_groups[0].input_boxed [14:12], \gen_operation_groups[0].input_boxed [5:0] };
  assign \gen_operation_groups[3].slice_inputs.sv2v_autoblock_1.fmt  = 32'd5;
  assign is_boxed = { \gen_operation_groups[0].input_boxed [14:9], \gen_operation_groups[0].input_boxed [14:12], \gen_operation_groups[0].input_boxed [5:0] };
  assign result_o = arbiter_output[134:7];
  assign status_o = arbiter_output[6:2];
  assign tag_o = arbiter_output[1:0];
endmodule

module \$paramod$62b97f2c24fbd0ec64efd8c0255d5867594e9cd9\rr_arb_tree_52163_F264E (clk_i, rst_ni, flush_i, rr_i, req_i, gnt_o, data_i, req_o, gnt_i, data_o, idx_o);
  wire [2:0] _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  input clk_i;
  wire clk_i;
  input [679:0] data_i;
  wire [679:0] data_i;
  output [135:0] data_o;
  wire [135:0] data_o;
  input flush_i;
  wire flush_i;
  wire [951:0] \gen_arbiter.data_nodes ;
  wire [2:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  wire [4:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  wire [2:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  wire [2:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  wire [4:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  wire [2:0] \gen_arbiter.gen_int_rr.rr_d ;
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  wire \gen_arbiter.gen_levels[2].gen_level[0].sel ;
  wire \gen_arbiter.gen_levels[2].gen_level[1].sel ;
  wire [6:0] \gen_arbiter.gnt_nodes ;
  wire [20:0] \gen_arbiter.index_nodes ;
  wire [4:0] \gen_arbiter.req_d ;
  wire [6:0] \gen_arbiter.req_nodes ;
  reg [2:0] \gen_arbiter.rr_q ;
  input gnt_i;
  wire gnt_i;
  output [4:0] gnt_o;
  wire [4:0] gnt_o;
  output [2:0] idx_o;
  wire [2:0] idx_o;
  input [4:0] req_i;
  wire [4:0] req_i;
  output req_o;
  wire req_o;
  input [2:0] rr_i;
  wire [2:0] rr_i;
  input rst_ni;
  wire rst_ni;
  wire [2:0] \sv2v_cast_1BFE4$func$FPNewBlackbox_D2l2s.preprocessed.v:149$564.inp ;
  wire [2:0] \sv2v_cast_1BFE4$func$FPNewBlackbox_D2l2s.preprocessed.v:149$565.inp ;
  wire [2:0] \sv2v_cast_1BFE4$func$FPNewBlackbox_D2l2s.preprocessed.v:169$548.$result ;
  wire [2:0] \sv2v_cast_1BFE4$func$FPNewBlackbox_D2l2s.preprocessed.v:169$549.$result ;
  wire [2:0] \sv2v_cast_1BFE4$func$FPNewBlackbox_D2l2s.preprocessed.v:169$558.inp ;
  wire [2:0] \sv2v_cast_1BFE4$func$FPNewBlackbox_D2l2s.preprocessed.v:169$559.inp ;
  wire [2:0] \sv2v_cast_1BFE4$func$FPNewBlackbox_D2l2s.preprocessed.v:169$560.inp ;
  wire [2:0] \sv2v_cast_1BFE4$func$FPNewBlackbox_D2l2s.preprocessed.v:169$561.inp ;
  wire [2:0] \sv2v_cast_1BFE4$func$FPNewBlackbox_D2l2s.preprocessed.v:169$562.inp ;
  wire [2:0] \sv2v_cast_1BFE4$func$FPNewBlackbox_D2l2s.preprocessed.v:169$563.inp ;
  assign _01_ = req_i[1] & \gen_arbiter.rr_q [0];
  assign _02_ = req_i[3] & \gen_arbiter.rr_q [0];
  assign gnt_o[0] = \gen_arbiter.gnt_nodes [3] & _19_;
  assign gnt_o[2] = \gen_arbiter.gnt_nodes [4] & _20_;
  assign gnt_o[1] = \gen_arbiter.gnt_nodes [3] & \gen_arbiter.gen_levels[2].gen_level[0].sel ;
  assign gnt_o[3] = \gen_arbiter.gnt_nodes [4] & \gen_arbiter.gen_levels[2].gen_level[1].sel ;
  assign _03_ = req_i[4] & \gen_arbiter.rr_q [2];
  assign _04_ = \gen_arbiter.req_nodes [4] & \gen_arbiter.rr_q [1];
  assign \gen_arbiter.gnt_nodes [1] = gnt_i & _23_;
  assign \gen_arbiter.gnt_nodes [3] = \gen_arbiter.gnt_nodes [1] & _24_;
  assign gnt_o[4] = \gen_arbiter.gnt_nodes [2] & req_i[4];
  assign \gen_arbiter.gnt_nodes [2] = gnt_i & \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \gen_arbiter.gnt_nodes [4] = \gen_arbiter.gnt_nodes [1] & \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.rr_q  <= 3'h0;
    else if (_05_) \gen_arbiter.rr_q  <= _00_;
  assign _05_ = | { _16_, flush_i };
  assign _06_ = 32'd0 > \gen_arbiter.rr_q ;
  assign _07_ = 32'd1 > \gen_arbiter.rr_q ;
  assign _08_ = 32'd2 > \gen_arbiter.rr_q ;
  assign _09_ = 32'd3 > \gen_arbiter.rr_q ;
  assign _10_ = 32'd4 > \gen_arbiter.rr_q ;
  assign _11_ = 32'd0 <= \gen_arbiter.rr_q ;
  assign _12_ = 32'd1 <= \gen_arbiter.rr_q ;
  assign _13_ = 32'd2 <= \gen_arbiter.rr_q ;
  assign _14_ = 32'd3 <= \gen_arbiter.rr_q ;
  assign _15_ = 32'd4 <= \gen_arbiter.rr_q ;
  assign _16_ = gnt_i && req_o;
  assign _17_ = ~ req_i[0];
  assign _18_ = ~ req_i[2];
  assign _19_ = ~ \gen_arbiter.gen_levels[2].gen_level[0].sel ;
  assign _20_ = ~ \gen_arbiter.gen_levels[2].gen_level[1].sel ;
  assign _21_ = ~ \gen_arbiter.req_nodes [1];
  assign _22_ = ~ \gen_arbiter.req_nodes [3];
  assign _23_ = ~ \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign _24_ = ~ \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [3] = req_i[0] | req_i[1];
  assign \gen_arbiter.req_nodes [4] = req_i[2] | req_i[3];
  assign \gen_arbiter.gen_levels[2].gen_level[0].sel  = _17_ | _01_;
  assign \gen_arbiter.gen_levels[2].gen_level[1].sel  = _18_ | _02_;
  assign req_o = \gen_arbiter.req_nodes [1] | req_i[4];
  assign \gen_arbiter.req_nodes [1] = \gen_arbiter.req_nodes [3] | \gen_arbiter.req_nodes [4];
  assign \gen_arbiter.gen_levels[0].gen_level[0].sel  = _21_ | _03_;
  assign \gen_arbiter.gen_levels[1].gen_level[0].sel  = _22_ | _04_;
  assign _00_ = flush_i ? 3'h0 : \gen_arbiter.gen_int_rr.rr_d ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = _06_ ? req_i[0] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1] = _07_ ? req_i[1] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2] = _08_ ? req_i[2] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3] = _09_ ? req_i[3] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [4] = _10_ ? req_i[4] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = _11_ ? req_i[0] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1] = _12_ ? req_i[1] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2] = _13_ ? req_i[2] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3] = _14_ ? req_i[3] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [4] = _15_ ? req_i[4] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  = \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty  ? \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx  : \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  assign \gen_arbiter.gen_int_rr.rr_d  = _16_ ? \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  : 3'hx;
  assign \gen_arbiter.data_nodes [543:408] = \gen_arbiter.gen_levels[2].gen_level[0].sel  ? data_i[271:136] : data_i[135:0];
  assign \gen_arbiter.data_nodes [679:544] = \gen_arbiter.gen_levels[2].gen_level[1].sel  ? data_i[543:408] : data_i[407:272];
  assign idx_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? { 1'h1, \sv2v_cast_1BFE4$func$FPNewBlackbox_D2l2s.preprocessed.v:169$548.$result [1:0] } : { 1'h0, \sv2v_cast_1BFE4$func$FPNewBlackbox_D2l2s.preprocessed.v:169$549.$result [1:0] };
  assign { \gen_arbiter.index_nodes [5], \sv2v_cast_1BFE4$func$FPNewBlackbox_D2l2s.preprocessed.v:169$549.$result [1:0] } = \gen_arbiter.gen_levels[1].gen_level[0].sel  ? { 2'h1, \gen_arbiter.gen_levels[2].gen_level[1].sel  } : { 2'h0, \gen_arbiter.gen_levels[2].gen_level[0].sel  };
  assign { \gen_arbiter.index_nodes [8], \sv2v_cast_1BFE4$func$FPNewBlackbox_D2l2s.preprocessed.v:169$548.$result [1:0] } = req_i[4] ? 3'h0 : 3'h2;
  assign data_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? \gen_arbiter.data_nodes [407:272] : \gen_arbiter.data_nodes [271:136];
  assign \gen_arbiter.data_nodes [271:136] = \gen_arbiter.gen_levels[1].gen_level[0].sel  ? \gen_arbiter.data_nodes [679:544] : \gen_arbiter.data_nodes [543:408];
  assign \gen_arbiter.data_nodes [407:272] = req_i[4] ? data_i[679:544] : 136'h0000000000000000000000000000000000;
  \$paramod\lzc\WIDTH=32'00000000000000000000000000000101\MODE=1'0  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask )
  );
  \$paramod\lzc\WIDTH=32'00000000000000000000000000000101\MODE=1'0  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask )
  );
  assign { \gen_arbiter.data_nodes [951:680], \gen_arbiter.data_nodes [135:0] } = { 136'h0000000000000000000000000000000000, data_i[679:544], data_o };
  assign { \gen_arbiter.gnt_nodes [5], \gen_arbiter.gnt_nodes [0] } = { gnt_o[4], gnt_i };
  assign { \gen_arbiter.index_nodes [20:9], \gen_arbiter.index_nodes [7:6], \gen_arbiter.index_nodes [4:0] } = { 8'h00, \gen_arbiter.gen_levels[2].gen_level[1].sel , 2'h0, \gen_arbiter.gen_levels[2].gen_level[0].sel , \sv2v_cast_1BFE4$func$FPNewBlackbox_D2l2s.preprocessed.v:169$548.$result [1:0], \sv2v_cast_1BFE4$func$FPNewBlackbox_D2l2s.preprocessed.v:169$549.$result [1:0], idx_o };
  assign \gen_arbiter.req_d  = req_i;
  assign { \gen_arbiter.req_nodes [6:5], \gen_arbiter.req_nodes [2], \gen_arbiter.req_nodes [0] } = { 1'h0, req_i[4], req_i[4], req_o };
  assign \sv2v_cast_1BFE4$func$FPNewBlackbox_D2l2s.preprocessed.v:149$564.inp  = 3'hx;
  assign \sv2v_cast_1BFE4$func$FPNewBlackbox_D2l2s.preprocessed.v:149$565.inp  = 3'hx;
  assign \sv2v_cast_1BFE4$func$FPNewBlackbox_D2l2s.preprocessed.v:169$548.$result [2] = 1'h1;
  assign \sv2v_cast_1BFE4$func$FPNewBlackbox_D2l2s.preprocessed.v:169$549.$result [2] = 1'h0;
  assign \sv2v_cast_1BFE4$func$FPNewBlackbox_D2l2s.preprocessed.v:169$558.inp  = 3'hx;
  assign \sv2v_cast_1BFE4$func$FPNewBlackbox_D2l2s.preprocessed.v:169$559.inp  = 3'hx;
  assign \sv2v_cast_1BFE4$func$FPNewBlackbox_D2l2s.preprocessed.v:169$560.inp  = 3'hx;
  assign \sv2v_cast_1BFE4$func$FPNewBlackbox_D2l2s.preprocessed.v:169$561.inp  = 3'hx;
  assign \sv2v_cast_1BFE4$func$FPNewBlackbox_D2l2s.preprocessed.v:169$562.inp  = 3'hx;
  assign \sv2v_cast_1BFE4$func$FPNewBlackbox_D2l2s.preprocessed.v:169$563.inp  = 3'hx;
endmodule

module \$paramod$6313957f3f8e5ac0edbd3470c2d5deb9a757f657\fpnew_fma_FC83A_5615B (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, op_mod_i, tag_i, aux_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, tag_o, aux_o, out_valid_o, out_ready_i, busy_o);
  wire _000_;
  wire _001_;
  wire [7:0] _002_;
  wire [12:0] _003_;
  wire [53:0] _004_;
  wire [7:0] _005_;
  wire [12:0] _006_;
  wire _007_;
  wire [63:0] _008_;
  wire _009_;
  wire [108:0] _010_;
  wire [12:0] _011_;
  wire [53:0] _012_;
  wire _013_;
  wire [63:0] _014_;
  wire _015_;
  wire [108:0] _016_;
  wire [63:0] _017_;
  wire _018_;
  wire [63:0] _019_;
  wire [63:0] _020_;
  wire [31:0] _021_;
  wire [31:0] _022_;
  wire [31:0] _023_;
  wire [163:0] _024_;
  wire [31:0] _025_;
  wire [31:0] _026_;
  wire [31:0] _027_;
  wire [31:0] _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire [163:0] _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire [162:0] _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire [31:0] _071_;
  wire [31:0] _072_;
  wire [31:0] _073_;
  wire [31:0] _074_;
  wire _075_;
  wire [31:0] _076_;
  wire [163:0] _077_;
  wire _078_;
  wire _079_;
  wire [31:0] _080_;
  wire _081_;
  wire [162:0] addend_after_shift;
  wire [7:0] addend_shamt;
  wire [7:0] addend_shamt_q;
  wire [162:0] addend_shifted;
  wire [52:0] addend_sticky_bits;
  wire any_operand_inf;
  wire any_operand_nan;
  input aux_i;
  wire aux_i;
  output aux_o;
  wire aux_o;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  wire effective_subtraction;
  wire effective_subtraction_q;
  wire [12:0] exponent_a;
  wire [12:0] exponent_addend;
  wire [12:0] exponent_b;
  wire [12:0] exponent_c;
  wire [12:0] exponent_difference;
  wire [12:0] exponent_difference_q;
  wire [12:0] exponent_product;
  wire [12:0] exponent_product_q;
  output extension_bit_o;
  wire extension_bit_o;
  wire [12:0] final_exponent;
  wire [53:0] final_mantissa;
  wire final_sign;
  wire final_sign_q;
  input flush_i;
  wire flush_i;
  wire \gen_input_pipeline[0].reg_ena ;
  wire \gen_inside_pipeline[0].reg_ena ;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  wire [7:0] info_a;
  wire [7:0] info_b;
  wire [7:0] info_c;
  wire [23:0] info_q;
  wire inject_carry_in;
  wire [0:1] inp_pipe_aux_q;
  wire [5:0] inp_pipe_is_boxed_q;
  wire [0:1] inp_pipe_op_mod_q;
  wire [7:0] inp_pipe_op_q;
  wire [383:0] inp_pipe_operands_q;
  wire [0:1] inp_pipe_ready;
  wire [5:0] inp_pipe_rnd_mode_q;
  wire [3:0] inp_pipe_tag_q;
  wire [0:1] inp_pipe_valid_q;
  input [2:0] is_boxed_i;
  wire [2:0] is_boxed_i;
  wire [6:0] leading_zero_count;
  wire [7:0] leading_zero_count_sgn;
  wire lzc_zeroes;
  wire [52:0] mantissa_a;
  wire [52:0] mantissa_b;
  wire [52:0] mantissa_c;
  wire [15:0] mid_pipe_add_shamt_q;
  wire [0:1] mid_pipe_aux_q;
  wire [0:1] mid_pipe_eff_sub_q;
  wire [25:0] mid_pipe_exp_diff_q;
  wire [25:0] mid_pipe_exp_prod_q;
  wire [0:1] mid_pipe_final_sign_q;
  wire [0:1] mid_pipe_ready;
  wire [0:1] mid_pipe_res_is_spec_q;
  wire [5:0] mid_pipe_rnd_mode_q;
  wire [127:0] mid_pipe_spec_res_q;
  wire [9:0] mid_pipe_spec_stat_q;
  wire [0:1] mid_pipe_sticky_q;
  wire [325:0] mid_pipe_sum_q;
  wire [3:0] mid_pipe_tag_q;
  wire [25:0] mid_pipe_tent_exp_q;
  wire [0:1] mid_pipe_valid_q;
  wire [7:0] norm_shamt;
  wire [12:0] normalized_exponent;
  wire of_after_round;
  wire of_before_round;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  wire [63:0] operand_a;
  wire [63:0] operand_b;
  wire [63:0] operand_c;
  input [191:0] operands_i;
  wire [191:0] operands_i;
  wire out_pipe_aux_q;
  wire out_pipe_ready;
  wire [63:0] out_pipe_result_q;
  wire [4:0] out_pipe_status_q;
  wire [1:0] out_pipe_tag_q;
  wire out_pipe_valid_q;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  wire [62:0] pre_round_abs;
  wire [10:0] pre_round_exponent;
  wire [51:0] pre_round_mantissa;
  wire pre_round_sign;
  wire [105:0] product;
  wire [162:0] product_shifted;
  wire [63:0] regular_result;
  wire [4:0] regular_status;
  wire [63:0] result_d;
  wire result_is_special;
  wire result_is_special_q;
  output [63:0] result_o;
  wire [63:0] result_o;
  wire result_zero;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_q;
  wire [1:0] round_sticky_bits;
  wire [62:0] rounded_abs;
  wire rounded_sign;
  input rst_ni;
  wire rst_ni;
  wire signalling_nan;
  wire [63:0] special_result;
  wire [63:0] special_result_q;
  wire [4:0] special_status;
  wire [4:0] special_status_q;
  wire [4:0] status_d;
  output [4:0] status_o;
  wire [4:0] status_o;
  wire sticky_after_norm;
  wire sticky_before_add;
  wire sticky_before_add_q;
  wire [162:0] sum;
  wire sum_carry;
  wire [108:0] sum_lower;
  wire [162:0] sum_q;
  wire [163:0] sum_raw;
  wire [163:0] sum_shifted;
  wire [108:0] sum_sticky_bits;
  wire [13:1] sv2v_tmp_00793;
  wire [64:1] sv2v_tmp_0252C;
  wire [2:1] sv2v_tmp_192AB;
  wire sv2v_tmp_25EE6;
  wire [5:1] sv2v_tmp_2A843;
  wire [13:1] sv2v_tmp_2D21E;
  wire [2:1] sv2v_tmp_36387;
  wire [64:1] sv2v_tmp_4A83E;
  wire sv2v_tmp_56A72;
  wire [2:1] sv2v_tmp_6DFE4;
  wire sv2v_tmp_6F5F7;
  wire sv2v_tmp_73AEA;
  wire sv2v_tmp_7DEC5;
  wire [8:1] sv2v_tmp_83404;
  wire sv2v_tmp_8D189;
  wire sv2v_tmp_9E262;
  wire [3:1] sv2v_tmp_A74E2;
  wire [13:1] sv2v_tmp_B4C85;
  wire [192:1] sv2v_tmp_BC8B9;
  wire sv2v_tmp_CB10A;
  wire [4:1] sv2v_tmp_CBA8F;
  wire sv2v_tmp_CDA0E;
  wire [163:1] sv2v_tmp_CEAB3;
  wire sv2v_tmp_D1C37;
  wire sv2v_tmp_D7BD0;
  wire [3:1] sv2v_tmp_E1339;
  wire [5:1] sv2v_tmp_EC01B;
  wire [3:1] sv2v_tmp_FE389;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  wire [12:0] tentative_exponent;
  wire [12:0] tentative_exponent_q;
  wire tentative_sign;
  wire uf_after_round;
  assign exponent_addend = $signed({ 2'h0, operand_c[62:52] }) + $signed({ 12'h000, _059_ });
  assign _021_ = { 2'h0, exponent_a[10:0] } + info_a[6];
  assign _022_ = _021_ + { 2'h0, operand_b[62:52] };
  assign _023_ = _022_ + info_b[6];
  assign _024_ = { 55'h00000000000000, product, 2'h0 } + addend_shifted;
  assign sum_raw = _024_ + inject_carry_in;
  assign _026_ = 32'd55 + leading_zero_count;
  assign _025_ = $signed(_073_) + $signed(32'd1);
  assign _027_ = $signed(32'd55) + $signed(mid_pipe_exp_prod_q[12:0]);
  assign _028_ = $signed(normalized_exponent) + $signed(32'd1);
  assign \gen_input_pipeline[0].reg_ena  = in_ready_o & in_valid_i;
  assign inject_carry_in = effective_subtraction & _061_;
  assign \gen_inside_pipeline[0].reg_ena  = inp_pipe_ready[1] & inp_pipe_valid_q[1];
  assign regular_status[1] = uf_after_round & regular_status[0];
  reg \inp_pipe_valid_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \inp_pipe_valid_q_reg[0]  <= 1'h0;
    else if (_029_) \inp_pipe_valid_q_reg[0]  <= _000_;
  assign inp_pipe_valid_q[1] = \inp_pipe_valid_q_reg[0] ;
  reg [191:0] _097_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _097_ <= 192'h000000000000000000000000000000000000000000000000;
    else if (\gen_input_pipeline[0].reg_ena ) _097_ <= operands_i;
  assign inp_pipe_operands_q[191:0] = _097_;
  reg \mid_pipe_aux_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \mid_pipe_aux_q_reg[0]  <= 1'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) \mid_pipe_aux_q_reg[0]  <= inp_pipe_aux_q[1];
  assign mid_pipe_aux_q[1] = \mid_pipe_aux_q_reg[0] ;
  reg [2:0] _099_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _099_ <= 3'h0;
    else if (\gen_input_pipeline[0].reg_ena ) _099_ <= is_boxed_i;
  assign inp_pipe_is_boxed_q[2:0] = _099_;
  reg [2:0] _100_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _100_ <= 3'h0;
    else if (\gen_input_pipeline[0].reg_ena ) _100_ <= rnd_mode_i;
  assign inp_pipe_rnd_mode_q[2:0] = _100_;
  reg [1:0] _101_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _101_ <= 2'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) _101_ <= inp_pipe_tag_q[1:0];
  assign mid_pipe_tag_q[1:0] = _101_;
  reg [63:0] _102_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _102_ <= 64'h0000000000000000;
    else if (\gen_inside_pipeline[0].reg_ena ) _102_ <= special_result;
  assign mid_pipe_spec_res_q[63:0] = _102_;
  reg \mid_pipe_res_is_spec_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \mid_pipe_res_is_spec_q_reg[0]  <= 1'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) \mid_pipe_res_is_spec_q_reg[0]  <= result_is_special;
  assign mid_pipe_res_is_spec_q[1] = \mid_pipe_res_is_spec_q_reg[0] ;
  reg [2:0] _104_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _104_ <= 3'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) _104_ <= inp_pipe_rnd_mode_q[2:0];
  assign mid_pipe_rnd_mode_q[2:0] = _104_;
  reg \mid_pipe_final_sign_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \mid_pipe_final_sign_q_reg[0]  <= 1'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) \mid_pipe_final_sign_q_reg[0]  <= final_sign;
  assign mid_pipe_final_sign_q[1] = \mid_pipe_final_sign_q_reg[0] ;
  reg [162:0] _106_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _106_ <= 163'h00000000000000000000000000000000000000000;
    else if (\gen_inside_pipeline[0].reg_ena ) _106_ <= mid_pipe_sum_q[325:163];
  assign mid_pipe_sum_q[162:0] = _106_;
  reg \mid_pipe_sticky_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \mid_pipe_sticky_q_reg[0]  <= 1'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) \mid_pipe_sticky_q_reg[0]  <= sticky_before_add;
  assign mid_pipe_sticky_q[1] = \mid_pipe_sticky_q_reg[0] ;
  reg [7:0] _108_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _108_ <= 8'h00;
    else if (\gen_inside_pipeline[0].reg_ena ) _108_ <= addend_shamt;
  assign mid_pipe_add_shamt_q[7:0] = _108_;
  reg [12:0] _109_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _109_ <= 13'h0000;
    else if (\gen_inside_pipeline[0].reg_ena ) _109_ <= sv2v_tmp_B4C85;
  assign mid_pipe_tent_exp_q[12:0] = _109_;
  reg [12:0] _110_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _110_ <= 13'h0000;
    else if (\gen_inside_pipeline[0].reg_ena ) _110_ <= exponent_difference;
  assign mid_pipe_exp_diff_q[12:0] = _110_;
  reg [12:0] _111_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _111_ <= 13'h0000;
    else if (\gen_inside_pipeline[0].reg_ena ) _111_ <= exponent_product;
  assign mid_pipe_exp_prod_q[12:0] = _111_;
  reg \mid_pipe_eff_sub_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \mid_pipe_eff_sub_q_reg[0]  <= 1'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) \mid_pipe_eff_sub_q_reg[0]  <= effective_subtraction;
  assign mid_pipe_eff_sub_q[1] = \mid_pipe_eff_sub_q_reg[0] ;
  reg \mid_pipe_valid_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \mid_pipe_valid_q_reg[0]  <= 1'h0;
    else if (_030_) \mid_pipe_valid_q_reg[0]  <= _001_;
  assign mid_pipe_valid_q[1] = \mid_pipe_valid_q_reg[0] ;
  reg \inp_pipe_aux_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \inp_pipe_aux_q_reg[0]  <= 1'h0;
    else if (\gen_input_pipeline[0].reg_ena ) \inp_pipe_aux_q_reg[0]  <= aux_i;
  assign inp_pipe_aux_q[1] = \inp_pipe_aux_q_reg[0] ;
  reg [1:0] _115_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _115_ <= 2'h0;
    else if (\gen_input_pipeline[0].reg_ena ) _115_ <= tag_i;
  assign inp_pipe_tag_q[1:0] = _115_;
  reg \inp_pipe_op_mod_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \inp_pipe_op_mod_q_reg[0]  <= 1'h0;
    else if (\gen_input_pipeline[0].reg_ena ) \inp_pipe_op_mod_q_reg[0]  <= op_mod_i;
  assign inp_pipe_op_mod_q[1] = \inp_pipe_op_mod_q_reg[0] ;
  reg [3:0] _117_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _117_ <= 4'h0;
    else if (\gen_input_pipeline[0].reg_ena ) _117_ <= op_i;
  assign inp_pipe_op_q[3:0] = _117_;
  reg \mid_pipe_spec_stat_q_reg[4] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \mid_pipe_spec_stat_q_reg[4]  <= 1'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) \mid_pipe_spec_stat_q_reg[4]  <= mid_pipe_spec_stat_q[9];
  assign mid_pipe_spec_stat_q[4] = \mid_pipe_spec_stat_q_reg[4] ;
  assign _029_ = | { in_ready_o, flush_i };
  assign _030_ = | { inp_pipe_ready[1], flush_i };
  assign _032_ = | { _068_, _065_ };
  assign _031_ = | { _068_, _067_, _066_ };
  assign _033_ = | { _068_, _067_, _066_, _065_ };
  assign _034_ = | { _068_, _067_, _065_ };
  assign _035_ = sum_raw[163] == tentative_sign;
  assign uf_after_round = ! rounded_abs[62:52];
  assign of_after_round = rounded_abs[62:52] == 11'h7ff;
  assign _036_ = $signed(_025_) >= $signed(32'd0);
  assign of_before_round = $signed(final_exponent) >= $signed(32'd2047);
  assign _037_ = $signed(exponent_difference) > $signed(32'd0);
  assign _038_ = $signed(normalized_exponent) > $signed(32'd1);
  assign _039_ = $signed(exponent_difference) <= $signed(32'd4294967189);
  assign _040_ = $signed(exponent_difference) <= $signed(32'd55);
  assign _041_ = $signed(mid_pipe_exp_diff_q[12:0]) <= $signed(32'd0);
  assign _042_ = $signed(mid_pipe_exp_diff_q[12:0]) <= $signed(32'd2);
  assign _043_ = info_a[4] && info_b[5];
  assign _044_ = info_a[5] && info_b[4];
  assign _045_ = _053_ && info_c[4];
  assign _046_ = _045_ && effective_subtraction;
  assign _047_ = effective_subtraction && _062_;
  assign _048_ = effective_subtraction && _035_;
  assign _049_ = mid_pipe_eff_sub_q[1] && _042_;
  assign _050_ = _036_ && _051_;
  assign _051_ = ! lzc_zeroes;
  assign _052_ = _043_ || _044_;
  assign _053_ = info_a[4] || info_b[4];
  assign _054_ = info_a[5] || info_b[5];
  assign _055_ = _041_ || _049_;
  assign product = { info_a[7], mantissa_a[51:0] } * { info_b[7], operand_b[51:0] };
  assign _056_ = - sum_raw;
  assign _057_ = ~ inp_pipe_valid_q[1];
  assign _058_ = ~ inp_pipe_operands_q[63];
  assign _059_ = ~ info_c[7];
  assign _060_ = ~ addend_after_shift;
  assign _061_ = ~ sticky_before_add;
  assign _062_ = ~ sum_raw[163];
  assign _063_ = ~ mid_pipe_valid_q[1];
  assign in_ready_o = inp_pipe_ready[1] | _057_;
  assign inp_pipe_ready[1] = out_ready_i | _063_;
  assign sticky_after_norm = _069_ | mid_pipe_sticky_q[1];
  assign regular_status[2] = of_before_round | of_after_round;
  assign _064_ = _070_ | of_before_round;
  assign regular_status[0] = _064_ | of_after_round;
  assign _012_ = _038_ ? sum_shifted[161:108] : { 1'h0, sum_shifted[161:109] };
  assign _016_ = _038_ ? { sum_shifted[107:0], 1'h0 } : sum_shifted[108:0];
  assign _011_ = _038_ ? _074_[12:0] : 13'h0000;
  assign _003_ = sum_shifted[162] ? normalized_exponent : _011_;
  assign _010_ = sum_shifted[162] ? sum_shifted[108:0] : _016_;
  assign _004_ = sum_shifted[162] ? { 1'h1, sum_shifted[161:109] } : _012_;
  assign final_mantissa = sum_shifted[163] ? { 1'h1, sum_shifted[162:110] } : _004_;
  assign sum_sticky_bits = sum_shifted[163] ? sum_shifted[109:1] : _010_;
  assign final_exponent = sum_shifted[163] ? _028_[12:0] : _003_;
  assign _006_ = _050_ ? _025_[12:0] : 13'h0000;
  assign _005_ = _050_ ? _026_[7:0] : _027_[7:0];
  assign normalized_exponent = _055_ ? _006_ : mid_pipe_tent_exp_q[12:0];
  assign norm_shamt = _055_ ? _005_ : mid_pipe_add_shamt_q[7:0];
  assign _002_ = _040_ ? _072_[7:0] : 8'h00;
  assign addend_shamt = _039_ ? 8'ha3 : _002_;
  assign _020_ = info_c[4] ? { operand_c[63], 63'h7ff0000000000000 } : 64'h7ff0000000000000;
  assign _019_ = _053_ ? { tentative_sign, 63'h7ff0000000000000 } : _020_;
  assign _018_ = _046_ ? 1'h1 : 1'h0;
  assign _017_ = _046_ ? 64'h7ff0000000000000 : _019_;
  assign _015_ = any_operand_inf ? _018_ : 1'h0;
  assign _014_ = any_operand_inf ? _017_ : 64'h7ff0000000000000;
  assign _013_ = any_operand_inf ? 1'h1 : 1'h0;
  assign _009_ = any_operand_nan ? signalling_nan : _015_;
  assign _007_ = any_operand_nan ? 1'h1 : _013_;
  assign _008_ = any_operand_nan ? 64'h7ff0000000000000 : _014_;
  assign mid_pipe_spec_stat_q[9] = _052_ ? 1'h1 : _009_;
  assign result_is_special = _052_ ? 1'h1 : _007_;
  assign special_result = _052_ ? 64'h7ff0000000000000 : _008_;
  function [0:0] _192_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _192_ = b[0:0];
      3'b?1?:
        _192_ = b[1:1];
      3'b1??:
        _192_ = b[2:2];
      default:
        _192_ = a;
    endcase
  endfunction
  assign operand_a[63] = _192_(1'h1, { _058_, 1'h0, inp_pipe_operands_q[63] }, { _067_, _066_, _032_ });
  function [62:0] _193_;
    input [62:0] a;
    input [125:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _193_ = b[62:0];
      2'b1?:
        _193_ = b[125:63];
      default:
        _193_ = a;
    endcase
  endfunction
  assign { exponent_a[10:0], mantissa_a[51:0] } = _193_(63'h0010000000000001, { 63'h3ff0000000000000, inp_pipe_operands_q[62:0] }, { _066_, _034_ });
  assign info_b = _033_ ? info_q[15:8] : 8'hff;
  function [7:0] _195_;
    input [7:0] a;
    input [15:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _195_ = b[7:0];
      2'b1?:
        _195_ = b[15:8];
      default:
        _195_ = a;
    endcase
  endfunction
  assign info_a = _195_(8'hff, { 8'h81, info_q[7:0] }, { _066_, _034_ });
  function [63:0] _196_;
    input [63:0] a;
    input [127:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _196_ = b[63:0];
      2'b1?:
        _196_ = b[127:64];
      default:
        _196_ = a;
    endcase
  endfunction
  assign operand_c = _196_(64'h8010000000000001, { _081_, inp_pipe_operands_q[190:128], 64'h8000000000000000 }, { _031_, _065_ });
  assign operand_b = _033_ ? inp_pipe_operands_q[127:64] : 64'h8010000000000001;
  function [7:0] _198_;
    input [7:0] a;
    input [15:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _198_ = b[7:0];
      2'b1?:
        _198_ = b[15:8];
      default:
        _198_ = a;
    endcase
  endfunction
  assign info_c = _198_(8'hff, { info_q[23:16], 8'h21 }, { _031_, _065_ });
  assign _065_ = inp_pipe_op_q[3:0] == 4'h3;
  assign _066_ = inp_pipe_op_q[3:0] == 4'h2;
  assign _067_ = inp_pipe_op_q[3:0] == 4'h1;
  assign _068_ = ! inp_pipe_op_q[3:0];
  assign any_operand_inf = | { info_c[4], info_b[4], info_a[4] };
  assign any_operand_nan = | { info_c[3], info_b[3], info_a[3] };
  assign signalling_nan = | { info_c[2], info_b[2], info_a[2] };
  assign sticky_before_add = | addend_sticky_bits;
  assign _069_ = | sum_sticky_bits;
  assign _070_ = | round_sticky_bits;
  assign busy_o = | { mid_pipe_valid_q[1], inp_pipe_valid_q[1], in_valid_i };
  assign sum_shifted = mid_pipe_sum_q[162:0] << norm_shamt;
  assign { addend_after_shift, addend_sticky_bits } = { info_c[7], operand_c[51:0], 163'h00000000000000000000000000000000000000000 } >> addend_shamt;
  assign _071_ = _023_ - 32'd1023;
  assign exponent_difference = $signed(exponent_addend) - $signed(exponent_product);
  assign _072_ = $signed(32'd56) - $signed(exponent_difference);
  assign _073_ = $signed(mid_pipe_exp_prod_q[12:0]) - $signed({ 1'h0, leading_zero_count });
  assign _074_ = $signed(normalized_exponent) - $signed(32'd1);
  assign _075_ = in_ready_o ? in_valid_i : 1'hx;
  assign _000_ = flush_i ? 1'h0 : _075_;
  assign { _076_[31:13], exponent_product } = _054_ ? 32'd4294966275 : _071_;
  assign sv2v_tmp_B4C85 = _037_ ? exponent_addend : exponent_product;
  assign addend_shifted = effective_subtraction ? _060_ : addend_after_shift;
  assign { _077_[163], mid_pipe_sum_q[325:163] } = _047_ ? _056_ : sum_raw;
  assign _078_ = effective_subtraction ? 1'h0 : tentative_sign;
  assign final_sign = _048_ ? 1'h1 : _078_;
  assign _079_ = inp_pipe_ready[1] ? inp_pipe_valid_q[1] : 1'hx;
  assign _001_ = flush_i ? 1'h0 : _079_;
  assign { _080_[31:11], pre_round_abs[62:52] } = of_before_round ? 32'd2046 : { 21'h000000, final_exponent[10:0] };
  assign pre_round_mantissa = of_before_round ? 52'hfffffffffffff : final_mantissa[52:1];
  assign round_sticky_bits = of_before_round ? 2'h3 : { final_mantissa[0], sticky_after_norm };
  assign result_o = mid_pipe_res_is_spec_q[1] ? mid_pipe_spec_res_q[63:0] : { rounded_sign, rounded_abs };
  assign status_o = mid_pipe_res_is_spec_q[1] ? { mid_pipe_spec_stat_q[4], 4'h0 } : { 2'h0, regular_status[2:0] };
  assign _081_ = inp_pipe_operands_q[191] ^ inp_pipe_op_mod_q[1];
  assign effective_subtraction = tentative_sign ^ operand_c[63];
  assign tentative_sign = operand_a[63] ^ operand_b[63];
  \$paramod$47b04f1e7881f160e7da057470de6966c6afa7a0\fpnew_classifier  i_class_inputs (
    .info_o(info_q),
    .is_boxed_i(inp_pipe_is_boxed_q[2:0]),
    .operands_i(inp_pipe_operands_q[191:0])
  );
  \$paramod\fpnew_rounding\AbsWidth=32'00000000000000000000000000111111  i_fpnew_rounding (
    .abs_rounded_o(rounded_abs),
    .abs_value_i({ pre_round_abs[62:52], pre_round_mantissa }),
    .effective_subtraction_i(mid_pipe_eff_sub_q[1]),
    .exact_zero_o(result_zero),
    .rnd_mode_i(mid_pipe_rnd_mode_q[2:0]),
    .round_sticky_bits_i(round_sticky_bits),
    .sign_i(mid_pipe_final_sign_q[1]),
    .sign_o(rounded_sign)
  );
  \$paramod$c927328a5c48687dd6ac3e0f43c4e34721ec6c61\lzc  i_lzc (
    .cnt_o(leading_zero_count),
    .empty_o(lzc_zeroes),
    .in_i(mid_pipe_sum_q[108:0])
  );
  assign _076_[12:0] = exponent_product;
  assign _077_[162:0] = mid_pipe_sum_q[325:163];
  assign _080_[10:0] = pre_round_abs[62:52];
  assign addend_shamt_q = mid_pipe_add_shamt_q[7:0];
  assign aux_o = mid_pipe_aux_q[1];
  assign effective_subtraction_q = mid_pipe_eff_sub_q[1];
  assign exponent_a[12:11] = 2'h0;
  assign exponent_b = { 2'h0, operand_b[62:52] };
  assign exponent_c = { 2'h0, operand_c[62:52] };
  assign exponent_difference_q = mid_pipe_exp_diff_q[12:0];
  assign exponent_product_q = mid_pipe_exp_prod_q[12:0];
  assign extension_bit_o = 1'h1;
  assign final_sign_q = mid_pipe_final_sign_q[1];
  assign inp_pipe_aux_q[0] = aux_i;
  assign inp_pipe_is_boxed_q[5:3] = is_boxed_i;
  assign inp_pipe_op_mod_q[0] = op_mod_i;
  assign inp_pipe_op_q[7:4] = op_i;
  assign inp_pipe_operands_q[383:192] = operands_i;
  assign inp_pipe_ready[0] = in_ready_o;
  assign inp_pipe_rnd_mode_q[5:3] = rnd_mode_i;
  assign inp_pipe_tag_q[3:2] = tag_i;
  assign inp_pipe_valid_q[0] = in_valid_i;
  assign leading_zero_count_sgn = { 1'h0, leading_zero_count };
  assign mantissa_a[52] = info_a[7];
  assign mantissa_b = { info_b[7], operand_b[51:0] };
  assign mantissa_c = { info_c[7], operand_c[51:0] };
  assign mid_pipe_add_shamt_q[15:8] = addend_shamt;
  assign mid_pipe_aux_q[0] = inp_pipe_aux_q[1];
  assign mid_pipe_eff_sub_q[0] = effective_subtraction;
  assign mid_pipe_exp_diff_q[25:13] = exponent_difference;
  assign mid_pipe_exp_prod_q[25:13] = exponent_product;
  assign mid_pipe_final_sign_q[0] = final_sign;
  assign mid_pipe_ready = { inp_pipe_ready[1], out_ready_i };
  assign mid_pipe_res_is_spec_q[0] = result_is_special;
  assign mid_pipe_rnd_mode_q[5:3] = inp_pipe_rnd_mode_q[2:0];
  assign mid_pipe_spec_res_q[127:64] = special_result;
  assign { mid_pipe_spec_stat_q[8:5], mid_pipe_spec_stat_q[3:0] } = 8'h00;
  assign mid_pipe_sticky_q[0] = sticky_before_add;
  assign mid_pipe_tag_q[3:2] = inp_pipe_tag_q[1:0];
  assign mid_pipe_tent_exp_q[25:13] = sv2v_tmp_B4C85;
  assign mid_pipe_valid_q[0] = inp_pipe_valid_q[1];
  assign operand_a[62:0] = { exponent_a[10:0], mantissa_a[51:0] };
  assign out_pipe_aux_q = mid_pipe_aux_q[1];
  assign out_pipe_ready = out_ready_i;
  assign out_pipe_result_q = result_o;
  assign out_pipe_status_q = status_o;
  assign out_pipe_tag_q = mid_pipe_tag_q[1:0];
  assign out_pipe_valid_q = mid_pipe_valid_q[1];
  assign out_valid_o = mid_pipe_valid_q[1];
  assign pre_round_abs[51:0] = pre_round_mantissa;
  assign pre_round_exponent = pre_round_abs[62:52];
  assign pre_round_sign = mid_pipe_final_sign_q[1];
  assign product_shifted = { 55'h00000000000000, product, 2'h0 };
  assign regular_result = { rounded_sign, rounded_abs };
  assign regular_status[4:3] = 2'h0;
  assign result_d = result_o;
  assign result_is_special_q = mid_pipe_res_is_spec_q[1];
  assign rnd_mode_q = mid_pipe_rnd_mode_q[2:0];
  assign special_result_q = mid_pipe_spec_res_q[63:0];
  assign special_status = { mid_pipe_spec_stat_q[9], 4'h0 };
  assign special_status_q = { mid_pipe_spec_stat_q[4], 4'h0 };
  assign status_d = status_o;
  assign sticky_before_add_q = mid_pipe_sticky_q[1];
  assign sum = mid_pipe_sum_q[325:163];
  assign sum_carry = sum_raw[163];
  assign sum_lower = mid_pipe_sum_q[108:0];
  assign sum_q = mid_pipe_sum_q[162:0];
  assign sv2v_tmp_00793 = exponent_difference;
  assign sv2v_tmp_0252C = result_o;
  assign sv2v_tmp_192AB = mid_pipe_tag_q[1:0];
  assign sv2v_tmp_25EE6 = mid_pipe_valid_q[1];
  assign sv2v_tmp_2A843 = status_o;
  assign sv2v_tmp_2D21E = exponent_product;
  assign sv2v_tmp_36387 = tag_i;
  assign sv2v_tmp_4A83E = special_result;
  assign sv2v_tmp_56A72 = effective_subtraction;
  assign sv2v_tmp_6DFE4 = inp_pipe_tag_q[1:0];
  assign sv2v_tmp_6F5F7 = sticky_before_add;
  assign sv2v_tmp_73AEA = in_valid_i;
  assign sv2v_tmp_7DEC5 = result_is_special;
  assign sv2v_tmp_83404 = addend_shamt;
  assign sv2v_tmp_8D189 = aux_i;
  assign sv2v_tmp_9E262 = mid_pipe_aux_q[1];
  assign sv2v_tmp_A74E2 = inp_pipe_rnd_mode_q[2:0];
  assign sv2v_tmp_BC8B9 = operands_i;
  assign sv2v_tmp_CB10A = inp_pipe_valid_q[1];
  assign sv2v_tmp_CBA8F = op_i;
  assign sv2v_tmp_CDA0E = inp_pipe_aux_q[1];
  assign sv2v_tmp_CEAB3 = mid_pipe_sum_q[325:163];
  assign sv2v_tmp_D1C37 = op_mod_i;
  assign sv2v_tmp_D7BD0 = final_sign;
  assign sv2v_tmp_E1339 = rnd_mode_i;
  assign sv2v_tmp_EC01B = { mid_pipe_spec_stat_q[9], 4'h0 };
  assign sv2v_tmp_FE389 = is_boxed_i;
  assign tag_o = mid_pipe_tag_q[1:0];
  assign tentative_exponent = sv2v_tmp_B4C85;
  assign tentative_exponent_q = mid_pipe_tent_exp_q[12:0];
endmodule

module \$paramod$784774ac2bb97554e782849b61f33f38c24af425\fpnew_opgroup_block_A94B6_B7406 (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, op_mod_i, src_fmt_i, dst_fmt_i, int_fmt_i, vectorial_op_i, tag_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, tag_o, out_valid_o, out_ready_i
, busy_o);
  wire _0_;
  wire [135:0] arbiter_output;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  input [2:0] dst_fmt_i;
  wire [2:0] dst_fmt_i;
  output extension_bit_o;
  wire extension_bit_o;
  input flush_i;
  wire flush_i;
  wire [4:0] fmt_busy;
  wire [4:0] fmt_in_ready;
  wire [4:0] fmt_out_ready;
  wire [4:0] fmt_out_valid;
  wire [679:0] fmt_outputs;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [1:0] int_fmt_i;
  wire [1:0] int_fmt_i;
  input [14:0] is_boxed_i;
  wire [14:0] is_boxed_i;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [383:0] operands_i;
  wire [383:0] operands_i;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  output [127:0] result_o;
  wire [127:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  input [2:0] src_fmt_i;
  wire [2:0] src_fmt_i;
  output [4:0] status_o;
  wire [4:0] status_o;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  input vectorial_op_i;
  wire vectorial_op_i;
  assign in_ready_o = in_valid_i & _0_;
  wire [4:0] _3_ = 5'h00;
  assign _0_ = _3_[dst_fmt_i +: 1];
  \$paramod$62b97f2c24fbd0ec64efd8c0255d5867594e9cd9\rr_arb_tree_52163_F264E  i_arbiter (
    .clk_i(clk_i),
    .data_i(680'hfffffffffffffffffffffffffffffffffdfffffffffffffffffffffffffffffffffdfffffffffffffffffffffffffffffffffdfffffffffffffffffffffffffffffffffdfffffffffffffffffffffffffffffffffd),
    .data_o(arbiter_output),
    .flush_i(flush_i),
    .gnt_i(out_ready_i),
    .gnt_o(fmt_out_ready),
    .req_i(5'h00),
    .req_o(out_valid_o),
    .rr_i(3'h0),
    .rst_ni(rst_ni)
  );
  assign busy_o = 1'h0;
  assign extension_bit_o = arbiter_output[2];
  assign fmt_busy = 5'h00;
  assign fmt_in_ready = 5'h00;
  assign fmt_out_valid = 5'h00;
  assign fmt_outputs = 680'hfffffffffffffffffffffffffffffffffdfffffffffffffffffffffffffffffffffdfffffffffffffffffffffffffffffffffdfffffffffffffffffffffffffffffffffdfffffffffffffffffffffffffffffffffd;
  assign result_o = arbiter_output[135:8];
  assign status_o = arbiter_output[7:3];
  assign tag_o = arbiter_output[1:0];
endmodule

module \$paramod$c52c45561b827eec44f222fe27935e571607c539\fpnew_opgroup_block_A94B6_B7406 (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, op_mod_i, src_fmt_i, dst_fmt_i, int_fmt_i, vectorial_op_i, tag_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, tag_o, out_valid_o, out_ready_i
, busy_o);
  wire _0_;
  wire _1_;
  wire [135:0] arbiter_output;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  input [2:0] dst_fmt_i;
  wire [2:0] dst_fmt_i;
  output extension_bit_o;
  wire extension_bit_o;
  input flush_i;
  wire flush_i;
  wire [4:0] fmt_busy;
  wire [4:0] fmt_in_ready;
  wire [4:0] fmt_out_ready;
  wire [4:0] fmt_out_valid;
  wire [679:0] fmt_outputs;
  wire \gen_parallel_slices[1].active_format.in_valid ;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [1:0] int_fmt_i;
  wire [1:0] int_fmt_i;
  input [14:0] is_boxed_i;
  wire [14:0] is_boxed_i;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [383:0] operands_i;
  wire [383:0] operands_i;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  output [127:0] result_o;
  wire [127:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  input [2:0] src_fmt_i;
  wire [2:0] src_fmt_i;
  output [4:0] status_o;
  wire [4:0] status_o;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  input vectorial_op_i;
  wire vectorial_op_i;
  assign in_ready_o = in_valid_i & _1_;
  assign \gen_parallel_slices[1].active_format.in_valid  = in_valid_i & _0_;
  assign _0_ = dst_fmt_i == 3'h1;
  wire [4:0] _6_ = { 3'h0, fmt_in_ready[1], 1'h0 };
  assign _1_ = _6_[dst_fmt_i +: 1];
  \$paramod$1198b683346e22a416cfc24624090e1fa669579c\fpnew_opgroup_fmt_slice_E368D_75924  \gen_parallel_slices[1].active_format.i_fmt_slice  (
    .busy_o(busy_o),
    .clk_i(clk_i),
    .extension_bit_o(fmt_outputs[138]),
    .flush_i(flush_i),
    .in_ready_o(fmt_in_ready[1]),
    .in_valid_i(\gen_parallel_slices[1].active_format.in_valid ),
    .is_boxed_i(is_boxed_i[5:3]),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(operands_i),
    .out_ready_i(fmt_out_ready[1]),
    .out_valid_o(fmt_out_valid[1]),
    .result_o(fmt_outputs[271:144]),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .status_o(fmt_outputs[143:139]),
    .tag_i(tag_i),
    .tag_o(fmt_outputs[137:136]),
    .vectorial_op_i(vectorial_op_i)
  );
  \$paramod$62b97f2c24fbd0ec64efd8c0255d5867594e9cd9\rr_arb_tree_52163_F264E  i_arbiter (
    .clk_i(clk_i),
    .data_i({ 408'hfffffffffffffffffffffffffffffffffdfffffffffffffffffffffffffffffffffdfffffffffffffffffffffffffffffffffd, fmt_outputs[271:136], 136'hfffffffffffffffffffffffffffffffffd }),
    .data_o(arbiter_output),
    .flush_i(flush_i),
    .gnt_i(out_ready_i),
    .gnt_o(fmt_out_ready),
    .req_i({ 3'h0, fmt_out_valid[1], 1'h0 }),
    .req_o(out_valid_o),
    .rr_i(3'h0),
    .rst_ni(rst_ni)
  );
  assign extension_bit_o = arbiter_output[2];
  assign fmt_busy = { 3'h0, busy_o, 1'h0 };
  assign { fmt_in_ready[4:2], fmt_in_ready[0] } = 4'h0;
  assign { fmt_out_valid[4:2], fmt_out_valid[0] } = 4'h0;
  assign { fmt_outputs[679:272], fmt_outputs[135:0] } = 544'hfffffffffffffffffffffffffffffffffdfffffffffffffffffffffffffffffffffdfffffffffffffffffffffffffffffffffdfffffffffffffffffffffffffffffffffd;
  assign result_o = arbiter_output[135:8];
  assign status_o = arbiter_output[7:3];
  assign tag_o = arbiter_output[1:0];
endmodule

module \$paramod$c927328a5c48687dd6ac3e0f43c4e34721ec6c61\lzc (in_i, cnt_o, empty_o);
  output [6:0] cnt_o;
  wire [6:0] cnt_o;
  output empty_o;
  wire empty_o;
  wire [31:0] \gen_lzc.flip_vector.sv2v_autoblock_1.i ;
  wire [108:0] \gen_lzc.in_tmp ;
  wire [762:0] \gen_lzc.index_lut ;
  wire [895:0] \gen_lzc.index_nodes ;
  wire [127:0] \gen_lzc.sel_nodes ;
  input [108:0] in_i;
  wire [108:0] in_i;
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign \gen_lzc.sel_nodes [63] = in_i[108] | in_i[107];
  assign \gen_lzc.sel_nodes [64] = in_i[106] | in_i[105];
  assign \gen_lzc.sel_nodes [65] = in_i[104] | in_i[103];
  assign \gen_lzc.sel_nodes [66] = in_i[102] | in_i[101];
  assign \gen_lzc.sel_nodes [67] = in_i[100] | in_i[99];
  assign \gen_lzc.sel_nodes [68] = in_i[98] | in_i[97];
  assign \gen_lzc.sel_nodes [69] = in_i[96] | in_i[95];
  assign \gen_lzc.sel_nodes [70] = in_i[94] | in_i[93];
  assign \gen_lzc.sel_nodes [71] = in_i[92] | in_i[91];
  assign \gen_lzc.sel_nodes [72] = in_i[90] | in_i[89];
  assign \gen_lzc.sel_nodes [73] = in_i[88] | in_i[87];
  assign \gen_lzc.sel_nodes [74] = in_i[86] | in_i[85];
  assign \gen_lzc.sel_nodes [75] = in_i[84] | in_i[83];
  assign \gen_lzc.sel_nodes [76] = in_i[82] | in_i[81];
  assign \gen_lzc.sel_nodes [77] = in_i[80] | in_i[79];
  assign \gen_lzc.sel_nodes [78] = in_i[78] | in_i[77];
  assign \gen_lzc.sel_nodes [79] = in_i[76] | in_i[75];
  assign \gen_lzc.sel_nodes [80] = in_i[74] | in_i[73];
  assign \gen_lzc.sel_nodes [81] = in_i[72] | in_i[71];
  assign \gen_lzc.sel_nodes [82] = in_i[70] | in_i[69];
  assign \gen_lzc.sel_nodes [83] = in_i[68] | in_i[67];
  assign \gen_lzc.sel_nodes [84] = in_i[66] | in_i[65];
  assign \gen_lzc.sel_nodes [85] = in_i[64] | in_i[63];
  assign \gen_lzc.sel_nodes [86] = in_i[62] | in_i[61];
  assign \gen_lzc.sel_nodes [87] = in_i[60] | in_i[59];
  assign \gen_lzc.sel_nodes [88] = in_i[58] | in_i[57];
  assign \gen_lzc.sel_nodes [89] = in_i[56] | in_i[55];
  assign \gen_lzc.sel_nodes [90] = in_i[54] | in_i[53];
  assign \gen_lzc.sel_nodes [91] = in_i[52] | in_i[51];
  assign \gen_lzc.sel_nodes [92] = in_i[50] | in_i[49];
  assign \gen_lzc.sel_nodes [93] = in_i[48] | in_i[47];
  assign \gen_lzc.sel_nodes [94] = in_i[46] | in_i[45];
  assign \gen_lzc.sel_nodes [95] = in_i[44] | in_i[43];
  assign \gen_lzc.sel_nodes [96] = in_i[42] | in_i[41];
  assign \gen_lzc.sel_nodes [97] = in_i[40] | in_i[39];
  assign \gen_lzc.sel_nodes [98] = in_i[38] | in_i[37];
  assign \gen_lzc.sel_nodes [99] = in_i[36] | in_i[35];
  assign \gen_lzc.sel_nodes [100] = in_i[34] | in_i[33];
  assign \gen_lzc.sel_nodes [101] = in_i[32] | in_i[31];
  assign \gen_lzc.sel_nodes [102] = in_i[30] | in_i[29];
  assign \gen_lzc.sel_nodes [103] = in_i[28] | in_i[27];
  assign \gen_lzc.sel_nodes [104] = in_i[26] | in_i[25];
  assign \gen_lzc.sel_nodes [105] = in_i[24] | in_i[23];
  assign \gen_lzc.sel_nodes [106] = in_i[22] | in_i[21];
  assign \gen_lzc.sel_nodes [107] = in_i[20] | in_i[19];
  assign \gen_lzc.sel_nodes [108] = in_i[18] | in_i[17];
  assign \gen_lzc.sel_nodes [109] = in_i[16] | in_i[15];
  assign \gen_lzc.sel_nodes [110] = in_i[14] | in_i[13];
  assign \gen_lzc.sel_nodes [111] = in_i[12] | in_i[11];
  assign \gen_lzc.sel_nodes [112] = in_i[10] | in_i[9];
  assign \gen_lzc.sel_nodes [113] = in_i[8] | in_i[7];
  assign \gen_lzc.sel_nodes [114] = in_i[6] | in_i[5];
  assign \gen_lzc.sel_nodes [115] = in_i[4] | in_i[3];
  assign \gen_lzc.sel_nodes [116] = in_i[2] | in_i[1];
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | \gen_lzc.sel_nodes [2];
  assign \gen_lzc.sel_nodes [1] = \gen_lzc.sel_nodes [3] | \gen_lzc.sel_nodes [4];
  assign \gen_lzc.sel_nodes [2] = \gen_lzc.sel_nodes [5] | \gen_lzc.sel_nodes [6];
  assign \gen_lzc.sel_nodes [3] = \gen_lzc.sel_nodes [7] | \gen_lzc.sel_nodes [8];
  assign \gen_lzc.sel_nodes [4] = \gen_lzc.sel_nodes [9] | \gen_lzc.sel_nodes [10];
  assign \gen_lzc.sel_nodes [5] = \gen_lzc.sel_nodes [11] | \gen_lzc.sel_nodes [12];
  assign \gen_lzc.sel_nodes [7] = \gen_lzc.sel_nodes [15] | \gen_lzc.sel_nodes [16];
  assign \gen_lzc.sel_nodes [8] = \gen_lzc.sel_nodes [17] | \gen_lzc.sel_nodes [18];
  assign \gen_lzc.sel_nodes [9] = \gen_lzc.sel_nodes [19] | \gen_lzc.sel_nodes [20];
  assign \gen_lzc.sel_nodes [10] = \gen_lzc.sel_nodes [21] | \gen_lzc.sel_nodes [22];
  assign \gen_lzc.sel_nodes [11] = \gen_lzc.sel_nodes [23] | \gen_lzc.sel_nodes [24];
  assign \gen_lzc.sel_nodes [12] = \gen_lzc.sel_nodes [25] | \gen_lzc.sel_nodes [26];
  assign \gen_lzc.sel_nodes [6] = \gen_lzc.sel_nodes [27] | \gen_lzc.sel_nodes [28];
  assign \gen_lzc.sel_nodes [15] = \gen_lzc.sel_nodes [31] | \gen_lzc.sel_nodes [32];
  assign \gen_lzc.sel_nodes [16] = \gen_lzc.sel_nodes [33] | \gen_lzc.sel_nodes [34];
  assign \gen_lzc.sel_nodes [17] = \gen_lzc.sel_nodes [35] | \gen_lzc.sel_nodes [36];
  assign \gen_lzc.sel_nodes [18] = \gen_lzc.sel_nodes [37] | \gen_lzc.sel_nodes [38];
  assign \gen_lzc.sel_nodes [19] = \gen_lzc.sel_nodes [39] | \gen_lzc.sel_nodes [40];
  assign \gen_lzc.sel_nodes [20] = \gen_lzc.sel_nodes [41] | \gen_lzc.sel_nodes [42];
  assign \gen_lzc.sel_nodes [21] = \gen_lzc.sel_nodes [43] | \gen_lzc.sel_nodes [44];
  assign \gen_lzc.sel_nodes [22] = \gen_lzc.sel_nodes [45] | \gen_lzc.sel_nodes [46];
  assign \gen_lzc.sel_nodes [23] = \gen_lzc.sel_nodes [47] | \gen_lzc.sel_nodes [48];
  assign \gen_lzc.sel_nodes [24] = \gen_lzc.sel_nodes [49] | \gen_lzc.sel_nodes [50];
  assign \gen_lzc.sel_nodes [25] = \gen_lzc.sel_nodes [51] | \gen_lzc.sel_nodes [52];
  assign \gen_lzc.sel_nodes [26] = \gen_lzc.sel_nodes [53] | \gen_lzc.sel_nodes [54];
  assign \gen_lzc.sel_nodes [27] = \gen_lzc.sel_nodes [55] | \gen_lzc.sel_nodes [56];
  assign \gen_lzc.sel_nodes [28] = \gen_lzc.sel_nodes [57] | in_i[0];
  assign \gen_lzc.sel_nodes [31] = \gen_lzc.sel_nodes [63] | \gen_lzc.sel_nodes [64];
  assign \gen_lzc.sel_nodes [32] = \gen_lzc.sel_nodes [65] | \gen_lzc.sel_nodes [66];
  assign \gen_lzc.sel_nodes [33] = \gen_lzc.sel_nodes [67] | \gen_lzc.sel_nodes [68];
  assign \gen_lzc.sel_nodes [34] = \gen_lzc.sel_nodes [69] | \gen_lzc.sel_nodes [70];
  assign \gen_lzc.sel_nodes [35] = \gen_lzc.sel_nodes [71] | \gen_lzc.sel_nodes [72];
  assign \gen_lzc.sel_nodes [36] = \gen_lzc.sel_nodes [73] | \gen_lzc.sel_nodes [74];
  assign \gen_lzc.sel_nodes [37] = \gen_lzc.sel_nodes [75] | \gen_lzc.sel_nodes [76];
  assign \gen_lzc.sel_nodes [38] = \gen_lzc.sel_nodes [77] | \gen_lzc.sel_nodes [78];
  assign \gen_lzc.sel_nodes [39] = \gen_lzc.sel_nodes [79] | \gen_lzc.sel_nodes [80];
  assign \gen_lzc.sel_nodes [40] = \gen_lzc.sel_nodes [81] | \gen_lzc.sel_nodes [82];
  assign \gen_lzc.sel_nodes [41] = \gen_lzc.sel_nodes [83] | \gen_lzc.sel_nodes [84];
  assign \gen_lzc.sel_nodes [42] = \gen_lzc.sel_nodes [85] | \gen_lzc.sel_nodes [86];
  assign \gen_lzc.sel_nodes [43] = \gen_lzc.sel_nodes [87] | \gen_lzc.sel_nodes [88];
  assign \gen_lzc.sel_nodes [44] = \gen_lzc.sel_nodes [89] | \gen_lzc.sel_nodes [90];
  assign \gen_lzc.sel_nodes [45] = \gen_lzc.sel_nodes [91] | \gen_lzc.sel_nodes [92];
  assign \gen_lzc.sel_nodes [46] = \gen_lzc.sel_nodes [93] | \gen_lzc.sel_nodes [94];
  assign \gen_lzc.sel_nodes [47] = \gen_lzc.sel_nodes [95] | \gen_lzc.sel_nodes [96];
  assign \gen_lzc.sel_nodes [48] = \gen_lzc.sel_nodes [97] | \gen_lzc.sel_nodes [98];
  assign \gen_lzc.sel_nodes [49] = \gen_lzc.sel_nodes [99] | \gen_lzc.sel_nodes [100];
  assign \gen_lzc.sel_nodes [50] = \gen_lzc.sel_nodes [101] | \gen_lzc.sel_nodes [102];
  assign \gen_lzc.sel_nodes [51] = \gen_lzc.sel_nodes [103] | \gen_lzc.sel_nodes [104];
  assign \gen_lzc.sel_nodes [52] = \gen_lzc.sel_nodes [105] | \gen_lzc.sel_nodes [106];
  assign \gen_lzc.sel_nodes [53] = \gen_lzc.sel_nodes [107] | \gen_lzc.sel_nodes [108];
  assign \gen_lzc.sel_nodes [54] = \gen_lzc.sel_nodes [109] | \gen_lzc.sel_nodes [110];
  assign \gen_lzc.sel_nodes [55] = \gen_lzc.sel_nodes [111] | \gen_lzc.sel_nodes [112];
  assign \gen_lzc.sel_nodes [56] = \gen_lzc.sel_nodes [113] | \gen_lzc.sel_nodes [114];
  assign \gen_lzc.sel_nodes [57] = \gen_lzc.sel_nodes [115] | \gen_lzc.sel_nodes [116];
  assign \gen_lzc.index_nodes [447:441] = in_i[108] ? 7'h00 : 7'h01;
  assign \gen_lzc.index_nodes [454:448] = in_i[106] ? 7'h02 : 7'h03;
  assign \gen_lzc.index_nodes [461:455] = in_i[104] ? 7'h04 : 7'h05;
  assign \gen_lzc.index_nodes [468:462] = in_i[102] ? 7'h06 : 7'h07;
  assign \gen_lzc.index_nodes [475:469] = in_i[100] ? 7'h08 : 7'h09;
  assign \gen_lzc.index_nodes [482:476] = in_i[98] ? 7'h0a : 7'h0b;
  assign \gen_lzc.index_nodes [489:483] = in_i[96] ? 7'h0c : 7'h0d;
  assign \gen_lzc.index_nodes [496:490] = in_i[94] ? 7'h0e : 7'h0f;
  assign \gen_lzc.index_nodes [503:497] = in_i[92] ? 7'h10 : 7'h11;
  assign \gen_lzc.index_nodes [510:504] = in_i[90] ? 7'h12 : 7'h13;
  assign \gen_lzc.index_nodes [517:511] = in_i[88] ? 7'h14 : 7'h15;
  assign \gen_lzc.index_nodes [524:518] = in_i[86] ? 7'h16 : 7'h17;
  assign \gen_lzc.index_nodes [531:525] = in_i[84] ? 7'h18 : 7'h19;
  assign \gen_lzc.index_nodes [538:532] = in_i[82] ? 7'h1a : 7'h1b;
  assign \gen_lzc.index_nodes [545:539] = in_i[80] ? 7'h1c : 7'h1d;
  assign \gen_lzc.index_nodes [552:546] = in_i[78] ? 7'h1e : 7'h1f;
  assign \gen_lzc.index_nodes [559:553] = in_i[76] ? 7'h20 : 7'h21;
  assign \gen_lzc.index_nodes [566:560] = in_i[74] ? 7'h22 : 7'h23;
  assign \gen_lzc.index_nodes [573:567] = in_i[72] ? 7'h24 : 7'h25;
  assign \gen_lzc.index_nodes [580:574] = in_i[70] ? 7'h26 : 7'h27;
  assign \gen_lzc.index_nodes [587:581] = in_i[68] ? 7'h28 : 7'h29;
  assign \gen_lzc.index_nodes [594:588] = in_i[66] ? 7'h2a : 7'h2b;
  assign \gen_lzc.index_nodes [601:595] = in_i[64] ? 7'h2c : 7'h2d;
  assign \gen_lzc.index_nodes [608:602] = in_i[62] ? 7'h2e : 7'h2f;
  assign \gen_lzc.index_nodes [615:609] = in_i[60] ? 7'h30 : 7'h31;
  assign \gen_lzc.index_nodes [622:616] = in_i[58] ? 7'h32 : 7'h33;
  assign \gen_lzc.index_nodes [629:623] = in_i[56] ? 7'h34 : 7'h35;
  assign \gen_lzc.index_nodes [636:630] = in_i[54] ? 7'h36 : 7'h37;
  assign \gen_lzc.index_nodes [643:637] = in_i[52] ? 7'h38 : 7'h39;
  assign \gen_lzc.index_nodes [650:644] = in_i[50] ? 7'h3a : 7'h3b;
  assign \gen_lzc.index_nodes [657:651] = in_i[48] ? 7'h3c : 7'h3d;
  assign \gen_lzc.index_nodes [664:658] = in_i[46] ? 7'h3e : 7'h3f;
  assign \gen_lzc.index_nodes [671:665] = in_i[44] ? 7'h40 : 7'h41;
  assign \gen_lzc.index_nodes [678:672] = in_i[42] ? 7'h42 : 7'h43;
  assign \gen_lzc.index_nodes [685:679] = in_i[40] ? 7'h44 : 7'h45;
  assign \gen_lzc.index_nodes [692:686] = in_i[38] ? 7'h46 : 7'h47;
  assign \gen_lzc.index_nodes [699:693] = in_i[36] ? 7'h48 : 7'h49;
  assign \gen_lzc.index_nodes [706:700] = in_i[34] ? 7'h4a : 7'h4b;
  assign \gen_lzc.index_nodes [713:707] = in_i[32] ? 7'h4c : 7'h4d;
  assign \gen_lzc.index_nodes [720:714] = in_i[30] ? 7'h4e : 7'h4f;
  assign \gen_lzc.index_nodes [727:721] = in_i[28] ? 7'h50 : 7'h51;
  assign \gen_lzc.index_nodes [734:728] = in_i[26] ? 7'h52 : 7'h53;
  assign \gen_lzc.index_nodes [741:735] = in_i[24] ? 7'h54 : 7'h55;
  assign \gen_lzc.index_nodes [748:742] = in_i[22] ? 7'h56 : 7'h57;
  assign \gen_lzc.index_nodes [755:749] = in_i[20] ? 7'h58 : 7'h59;
  assign \gen_lzc.index_nodes [762:756] = in_i[18] ? 7'h5a : 7'h5b;
  assign \gen_lzc.index_nodes [769:763] = in_i[16] ? 7'h5c : 7'h5d;
  assign \gen_lzc.index_nodes [776:770] = in_i[14] ? 7'h5e : 7'h5f;
  assign \gen_lzc.index_nodes [783:777] = in_i[12] ? 7'h60 : 7'h61;
  assign \gen_lzc.index_nodes [790:784] = in_i[10] ? 7'h62 : 7'h63;
  assign \gen_lzc.index_nodes [797:791] = in_i[8] ? 7'h64 : 7'h65;
  assign \gen_lzc.index_nodes [804:798] = in_i[6] ? 7'h66 : 7'h67;
  assign \gen_lzc.index_nodes [811:805] = in_i[4] ? 7'h68 : 7'h69;
  assign \gen_lzc.index_nodes [818:812] = in_i[2] ? 7'h6a : 7'h6b;
  assign cnt_o = \gen_lzc.sel_nodes [1] ? \gen_lzc.index_nodes [13:7] : \gen_lzc.index_nodes [20:14];
  assign \gen_lzc.index_nodes [13:7] = \gen_lzc.sel_nodes [3] ? \gen_lzc.index_nodes [27:21] : \gen_lzc.index_nodes [34:28];
  assign \gen_lzc.index_nodes [20:14] = \gen_lzc.sel_nodes [5] ? \gen_lzc.index_nodes [41:35] : \gen_lzc.index_nodes [48:42];
  assign \gen_lzc.index_nodes [27:21] = \gen_lzc.sel_nodes [7] ? \gen_lzc.index_nodes [55:49] : \gen_lzc.index_nodes [62:56];
  assign \gen_lzc.index_nodes [34:28] = \gen_lzc.sel_nodes [9] ? \gen_lzc.index_nodes [69:63] : \gen_lzc.index_nodes [76:70];
  assign \gen_lzc.index_nodes [41:35] = \gen_lzc.sel_nodes [11] ? \gen_lzc.index_nodes [83:77] : \gen_lzc.index_nodes [90:84];
  assign \gen_lzc.index_nodes [48:42] = \gen_lzc.sel_nodes [6] ? \gen_lzc.index_nodes [97:91] : 7'h00;
  assign \gen_lzc.index_nodes [55:49] = \gen_lzc.sel_nodes [15] ? \gen_lzc.index_nodes [111:105] : \gen_lzc.index_nodes [118:112];
  assign \gen_lzc.index_nodes [62:56] = \gen_lzc.sel_nodes [17] ? \gen_lzc.index_nodes [125:119] : \gen_lzc.index_nodes [132:126];
  assign \gen_lzc.index_nodes [69:63] = \gen_lzc.sel_nodes [19] ? \gen_lzc.index_nodes [139:133] : \gen_lzc.index_nodes [146:140];
  assign \gen_lzc.index_nodes [76:70] = \gen_lzc.sel_nodes [21] ? \gen_lzc.index_nodes [153:147] : \gen_lzc.index_nodes [160:154];
  assign \gen_lzc.index_nodes [83:77] = \gen_lzc.sel_nodes [23] ? \gen_lzc.index_nodes [167:161] : \gen_lzc.index_nodes [174:168];
  assign \gen_lzc.index_nodes [90:84] = \gen_lzc.sel_nodes [25] ? \gen_lzc.index_nodes [181:175] : \gen_lzc.index_nodes [188:182];
  assign \gen_lzc.index_nodes [97:91] = \gen_lzc.sel_nodes [27] ? \gen_lzc.index_nodes [195:189] : \gen_lzc.index_nodes [202:196];
  assign \gen_lzc.index_nodes [111:105] = \gen_lzc.sel_nodes [31] ? \gen_lzc.index_nodes [223:217] : \gen_lzc.index_nodes [230:224];
  assign \gen_lzc.index_nodes [118:112] = \gen_lzc.sel_nodes [33] ? \gen_lzc.index_nodes [237:231] : \gen_lzc.index_nodes [244:238];
  assign \gen_lzc.index_nodes [125:119] = \gen_lzc.sel_nodes [35] ? \gen_lzc.index_nodes [251:245] : \gen_lzc.index_nodes [258:252];
  assign \gen_lzc.index_nodes [132:126] = \gen_lzc.sel_nodes [37] ? \gen_lzc.index_nodes [265:259] : \gen_lzc.index_nodes [272:266];
  assign \gen_lzc.index_nodes [139:133] = \gen_lzc.sel_nodes [39] ? \gen_lzc.index_nodes [279:273] : \gen_lzc.index_nodes [286:280];
  assign \gen_lzc.index_nodes [146:140] = \gen_lzc.sel_nodes [41] ? \gen_lzc.index_nodes [293:287] : \gen_lzc.index_nodes [300:294];
  assign \gen_lzc.index_nodes [153:147] = \gen_lzc.sel_nodes [43] ? \gen_lzc.index_nodes [307:301] : \gen_lzc.index_nodes [314:308];
  assign \gen_lzc.index_nodes [160:154] = \gen_lzc.sel_nodes [45] ? \gen_lzc.index_nodes [321:315] : \gen_lzc.index_nodes [328:322];
  assign \gen_lzc.index_nodes [167:161] = \gen_lzc.sel_nodes [47] ? \gen_lzc.index_nodes [335:329] : \gen_lzc.index_nodes [342:336];
  assign \gen_lzc.index_nodes [174:168] = \gen_lzc.sel_nodes [49] ? \gen_lzc.index_nodes [349:343] : \gen_lzc.index_nodes [356:350];
  assign \gen_lzc.index_nodes [181:175] = \gen_lzc.sel_nodes [51] ? \gen_lzc.index_nodes [363:357] : \gen_lzc.index_nodes [370:364];
  assign \gen_lzc.index_nodes [188:182] = \gen_lzc.sel_nodes [53] ? \gen_lzc.index_nodes [377:371] : \gen_lzc.index_nodes [384:378];
  assign \gen_lzc.index_nodes [195:189] = \gen_lzc.sel_nodes [55] ? \gen_lzc.index_nodes [391:385] : \gen_lzc.index_nodes [398:392];
  assign \gen_lzc.index_nodes [202:196] = \gen_lzc.sel_nodes [57] ? \gen_lzc.index_nodes [405:399] : \gen_lzc.index_nodes [412:406];
  assign \gen_lzc.index_nodes [223:217] = \gen_lzc.sel_nodes [63] ? \gen_lzc.index_nodes [447:441] : \gen_lzc.index_nodes [454:448];
  assign \gen_lzc.index_nodes [230:224] = \gen_lzc.sel_nodes [65] ? \gen_lzc.index_nodes [461:455] : \gen_lzc.index_nodes [468:462];
  assign \gen_lzc.index_nodes [237:231] = \gen_lzc.sel_nodes [67] ? \gen_lzc.index_nodes [475:469] : \gen_lzc.index_nodes [482:476];
  assign \gen_lzc.index_nodes [244:238] = \gen_lzc.sel_nodes [69] ? \gen_lzc.index_nodes [489:483] : \gen_lzc.index_nodes [496:490];
  assign \gen_lzc.index_nodes [251:245] = \gen_lzc.sel_nodes [71] ? \gen_lzc.index_nodes [503:497] : \gen_lzc.index_nodes [510:504];
  assign \gen_lzc.index_nodes [258:252] = \gen_lzc.sel_nodes [73] ? \gen_lzc.index_nodes [517:511] : \gen_lzc.index_nodes [524:518];
  assign \gen_lzc.index_nodes [265:259] = \gen_lzc.sel_nodes [75] ? \gen_lzc.index_nodes [531:525] : \gen_lzc.index_nodes [538:532];
  assign \gen_lzc.index_nodes [272:266] = \gen_lzc.sel_nodes [77] ? \gen_lzc.index_nodes [545:539] : \gen_lzc.index_nodes [552:546];
  assign \gen_lzc.index_nodes [279:273] = \gen_lzc.sel_nodes [79] ? \gen_lzc.index_nodes [559:553] : \gen_lzc.index_nodes [566:560];
  assign \gen_lzc.index_nodes [286:280] = \gen_lzc.sel_nodes [81] ? \gen_lzc.index_nodes [573:567] : \gen_lzc.index_nodes [580:574];
  assign \gen_lzc.index_nodes [293:287] = \gen_lzc.sel_nodes [83] ? \gen_lzc.index_nodes [587:581] : \gen_lzc.index_nodes [594:588];
  assign \gen_lzc.index_nodes [300:294] = \gen_lzc.sel_nodes [85] ? \gen_lzc.index_nodes [601:595] : \gen_lzc.index_nodes [608:602];
  assign \gen_lzc.index_nodes [307:301] = \gen_lzc.sel_nodes [87] ? \gen_lzc.index_nodes [615:609] : \gen_lzc.index_nodes [622:616];
  assign \gen_lzc.index_nodes [314:308] = \gen_lzc.sel_nodes [89] ? \gen_lzc.index_nodes [629:623] : \gen_lzc.index_nodes [636:630];
  assign \gen_lzc.index_nodes [321:315] = \gen_lzc.sel_nodes [91] ? \gen_lzc.index_nodes [643:637] : \gen_lzc.index_nodes [650:644];
  assign \gen_lzc.index_nodes [328:322] = \gen_lzc.sel_nodes [93] ? \gen_lzc.index_nodes [657:651] : \gen_lzc.index_nodes [664:658];
  assign \gen_lzc.index_nodes [335:329] = \gen_lzc.sel_nodes [95] ? \gen_lzc.index_nodes [671:665] : \gen_lzc.index_nodes [678:672];
  assign \gen_lzc.index_nodes [342:336] = \gen_lzc.sel_nodes [97] ? \gen_lzc.index_nodes [685:679] : \gen_lzc.index_nodes [692:686];
  assign \gen_lzc.index_nodes [349:343] = \gen_lzc.sel_nodes [99] ? \gen_lzc.index_nodes [699:693] : \gen_lzc.index_nodes [706:700];
  assign \gen_lzc.index_nodes [356:350] = \gen_lzc.sel_nodes [101] ? \gen_lzc.index_nodes [713:707] : \gen_lzc.index_nodes [720:714];
  assign \gen_lzc.index_nodes [363:357] = \gen_lzc.sel_nodes [103] ? \gen_lzc.index_nodes [727:721] : \gen_lzc.index_nodes [734:728];
  assign \gen_lzc.index_nodes [370:364] = \gen_lzc.sel_nodes [105] ? \gen_lzc.index_nodes [741:735] : \gen_lzc.index_nodes [748:742];
  assign \gen_lzc.index_nodes [377:371] = \gen_lzc.sel_nodes [107] ? \gen_lzc.index_nodes [755:749] : \gen_lzc.index_nodes [762:756];
  assign \gen_lzc.index_nodes [384:378] = \gen_lzc.sel_nodes [109] ? \gen_lzc.index_nodes [769:763] : \gen_lzc.index_nodes [776:770];
  assign \gen_lzc.index_nodes [391:385] = \gen_lzc.sel_nodes [111] ? \gen_lzc.index_nodes [783:777] : \gen_lzc.index_nodes [790:784];
  assign \gen_lzc.index_nodes [398:392] = \gen_lzc.sel_nodes [113] ? \gen_lzc.index_nodes [797:791] : \gen_lzc.index_nodes [804:798];
  assign \gen_lzc.index_nodes [405:399] = \gen_lzc.sel_nodes [115] ? \gen_lzc.index_nodes [811:805] : \gen_lzc.index_nodes [818:812];
  assign \gen_lzc.index_nodes [412:406] = in_i[0] ? 7'h6c : 7'h00;
  assign \gen_lzc.flip_vector.sv2v_autoblock_1.i  = 32'd109;
  assign \gen_lzc.in_tmp  = { in_i[0], in_i[1], in_i[2], in_i[3], in_i[4], in_i[5], in_i[6], in_i[7], in_i[8], in_i[9], in_i[10], in_i[11], in_i[12], in_i[13], in_i[14], in_i[15], in_i[16], in_i[17], in_i[18], in_i[19], in_i[20], in_i[21], in_i[22], in_i[23], in_i[24], in_i[25], in_i[26], in_i[27], in_i[28], in_i[29], in_i[30], in_i[31], in_i[32], in_i[33], in_i[34], in_i[35], in_i[36], in_i[37], in_i[38], in_i[39], in_i[40], in_i[41], in_i[42], in_i[43], in_i[44], in_i[45], in_i[46], in_i[47], in_i[48], in_i[49], in_i[50], in_i[51], in_i[52], in_i[53], in_i[54], in_i[55], in_i[56], in_i[57], in_i[58], in_i[59], in_i[60], in_i[61], in_i[62], in_i[63], in_i[64], in_i[65], in_i[66], in_i[67], in_i[68], in_i[69], in_i[70], in_i[71], in_i[72], in_i[73], in_i[74], in_i[75], in_i[76], in_i[77], in_i[78], in_i[79], in_i[80], in_i[81], in_i[82], in_i[83], in_i[84], in_i[85], in_i[86], in_i[87], in_i[88], in_i[89], in_i[90], in_i[91], in_i[92], in_i[93], in_i[94], in_i[95], in_i[96], in_i[97], in_i[98], in_i[99], in_i[100], in_i[101], in_i[102], in_i[103], in_i[104], in_i[105], in_i[106], in_i[107], in_i[108] };
  assign \gen_lzc.index_lut  = 763'h6cd7ab4e8cf9b2e4c78b0e0bf7aedcb76acd8af5aad4a74a8d09f3a6cc972a4c88f1a2c4870a0c07ef9ebc76e9cb86ed9ab466c98b05eb96ac56a94a84e992a446890a03e78e9c3668c982e58a9426488901e3868c16284880e182840608080;
  assign { \gen_lzc.index_nodes [888:819], \gen_lzc.index_nodes [440:413], \gen_lzc.index_nodes [216:203], \gen_lzc.index_nodes [104:98], \gen_lzc.index_nodes [6:0] } = { 119'h0000000000000000d8000000000000, cnt_o };
  assign { \gen_lzc.sel_nodes [126:117], \gen_lzc.sel_nodes [62:58], \gen_lzc.sel_nodes [30:29], \gen_lzc.sel_nodes [14:13] } = { 9'h000, in_i[0], 4'h0, in_i[0], 3'h0, \gen_lzc.sel_nodes [6] };
endmodule

module \$paramod$cdc7ff1e79a7bbede175978d94459e7cb665f71e\fpnew_opgroup_block_A94B6_B7406 (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, op_mod_i, src_fmt_i, dst_fmt_i, int_fmt_i, vectorial_op_i, tag_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, tag_o, out_valid_o, out_ready_i
, busy_o);
  wire _0_;
  wire [135:0] arbiter_output;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  input [2:0] dst_fmt_i;
  wire [2:0] dst_fmt_i;
  output extension_bit_o;
  wire extension_bit_o;
  input flush_i;
  wire flush_i;
  wire [4:0] fmt_busy;
  wire [4:0] fmt_in_ready;
  wire [4:0] fmt_out_ready;
  wire [4:0] fmt_out_valid;
  wire [679:0] fmt_outputs;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [1:0] int_fmt_i;
  wire [1:0] int_fmt_i;
  input [9:0] is_boxed_i;
  wire [9:0] is_boxed_i;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [255:0] operands_i;
  wire [255:0] operands_i;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  output [127:0] result_o;
  wire [127:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  input [2:0] src_fmt_i;
  wire [2:0] src_fmt_i;
  output [4:0] status_o;
  wire [4:0] status_o;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  input vectorial_op_i;
  wire vectorial_op_i;
  assign in_ready_o = in_valid_i & _0_;
  wire [4:0] _3_ = 5'h00;
  assign _0_ = _3_[dst_fmt_i +: 1];
  \$paramod$62b97f2c24fbd0ec64efd8c0255d5867594e9cd9\rr_arb_tree_52163_F264E  i_arbiter (
    .clk_i(clk_i),
    .data_i(680'hfffffffffffffffffffffffffffffffffdfffffffffffffffffffffffffffffffffdfffffffffffffffffffffffffffffffffdfffffffffffffffffffffffffffffffffdfffffffffffffffffffffffffffffffffd),
    .data_o(arbiter_output),
    .flush_i(flush_i),
    .gnt_i(out_ready_i),
    .gnt_o(fmt_out_ready),
    .req_i(5'h00),
    .req_o(out_valid_o),
    .rr_i(3'h0),
    .rst_ni(rst_ni)
  );
  assign busy_o = 1'h0;
  assign extension_bit_o = arbiter_output[2];
  assign fmt_busy = 5'h00;
  assign fmt_in_ready = 5'h00;
  assign fmt_out_valid = 5'h00;
  assign fmt_outputs = 680'hfffffffffffffffffffffffffffffffffdfffffffffffffffffffffffffffffffffdfffffffffffffffffffffffffffffffffdfffffffffffffffffffffffffffffffffdfffffffffffffffffffffffffffffffffd;
  assign result_o = arbiter_output[135:8];
  assign status_o = arbiter_output[7:3];
  assign tag_o = arbiter_output[1:0];
endmodule

module \$paramod\fpnew_rounding\AbsWidth=32'00000000000000000000000000111111 (abs_value_i, sign_i, round_sticky_bits_i, rnd_mode_i, effective_subtraction_i, abs_rounded_o, sign_o, exact_zero_o);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire [1:0] _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  output [62:0] abs_rounded_o;
  wire [62:0] abs_rounded_o;
  input [62:0] abs_value_i;
  wire [62:0] abs_value_i;
  input effective_subtraction_i;
  wire effective_subtraction_i;
  output exact_zero_o;
  wire exact_zero_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input [1:0] round_sticky_bits_i;
  wire [1:0] round_sticky_bits_i;
  wire round_up;
  input sign_i;
  wire sign_i;
  output sign_o;
  wire sign_o;
  assign abs_rounded_o = abs_value_i + round_up;
  assign _01_ = ! abs_value_i;
  assign exact_zero_o = _01_ && _02_;
  assign _04_ = exact_zero_o && effective_subtraction_i;
  assign _05_ = ~ sign_i;
  function [0:0] _22_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _22_ = b[0:0];
      3'b?1?:
        _22_ = b[1:1];
      3'b1??:
        _22_ = b[2:2];
      default:
        _22_ = a;
    endcase
  endfunction
  assign _00_ = _22_(1'hx, { 1'h0, abs_value_i[0], 1'h1 }, { _09_, _07_, _06_ });
  assign _06_ = round_sticky_bits_i == 2'h3;
  assign _07_ = round_sticky_bits_i == 2'h2;
  assign _09_ = | { _08_[1], _02_ };
  assign _02_ = ! round_sticky_bits_i;
  assign _08_[1] = round_sticky_bits_i == 2'h1;
  function [0:0] _28_;
    input [0:0] a;
    input [4:0] b;
    input [4:0] s;
    casez (s) // synopsys parallel_case
      5'b????1:
        _28_ = b[0:0];
      5'b???1?:
        _28_ = b[1:1];
      5'b??1??:
        _28_ = b[2:2];
      5'b?1???:
        _28_ = b[3:3];
      5'b1????:
        _28_ = b[4:4];
      default:
        _28_ = a;
    endcase
  endfunction
  assign round_up = _28_(1'h1, { _00_, 1'h0, _15_, _16_, round_sticky_bits_i[1] }, { _10_, _13_, _03_, _12_, _11_ });
  assign _11_ = rnd_mode_i == 3'h4;
  assign _12_ = rnd_mode_i == 3'h3;
  assign _03_ = rnd_mode_i == 3'h2;
  assign _13_ = rnd_mode_i == 3'h1;
  assign _10_ = ! rnd_mode_i;
  assign _14_ = | round_sticky_bits_i;
  assign _15_ = _14_ ? sign_i : 1'h0;
  assign _16_ = _14_ ? _05_ : 1'h0;
  assign sign_o = _04_ ? _03_ : sign_i;
  assign _08_[0] = _02_;
endmodule

module \$paramod\lzc\WIDTH=32'00000000000000000000000000000100\MODE=1'0 (in_i, cnt_o, empty_o);
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  output empty_o;
  wire empty_o;
  wire [31:0] \gen_lzc.flip_vector.sv2v_autoblock_1.i ;
  wire [3:0] \gen_lzc.in_tmp ;
  wire [7:0] \gen_lzc.index_lut ;
  wire [7:0] \gen_lzc.index_nodes ;
  wire [3:0] \gen_lzc.sel_nodes ;
  input [3:0] in_i;
  wire [3:0] in_i;
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign \gen_lzc.sel_nodes [1] = in_i[0] | in_i[1];
  assign \gen_lzc.sel_nodes [2] = in_i[2] | in_i[3];
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | \gen_lzc.sel_nodes [2];
  assign \gen_lzc.index_nodes [3:2] = in_i[0] ? 2'h0 : 2'h1;
  assign \gen_lzc.index_nodes [5:4] = in_i[2] ? 2'h2 : 2'h3;
  assign cnt_o = \gen_lzc.sel_nodes [1] ? \gen_lzc.index_nodes [3:2] : \gen_lzc.index_nodes [5:4];
  assign \gen_lzc.flip_vector.sv2v_autoblock_1.i  = 32'd4;
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 8'he4;
  assign \gen_lzc.index_nodes [1:0] = cnt_o;
endmodule

module \$paramod\lzc\WIDTH=32'00000000000000000000000000000101\MODE=1'0 (in_i, cnt_o, empty_o);
  output [2:0] cnt_o;
  wire [2:0] cnt_o;
  output empty_o;
  wire empty_o;
  wire [31:0] \gen_lzc.flip_vector.sv2v_autoblock_1.i ;
  wire [4:0] \gen_lzc.in_tmp ;
  wire [14:0] \gen_lzc.index_lut ;
  wire [23:0] \gen_lzc.index_nodes ;
  wire [7:0] \gen_lzc.sel_nodes ;
  input [4:0] in_i;
  wire [4:0] in_i;
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign \gen_lzc.sel_nodes [3] = in_i[0] | in_i[1];
  assign \gen_lzc.sel_nodes [4] = in_i[2] | in_i[3];
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | in_i[4];
  assign \gen_lzc.sel_nodes [1] = \gen_lzc.sel_nodes [3] | \gen_lzc.sel_nodes [4];
  assign \gen_lzc.index_nodes [11:9] = in_i[0] ? 3'h0 : 3'h1;
  assign \gen_lzc.index_nodes [14:12] = in_i[2] ? 3'h2 : 3'h3;
  assign cnt_o = \gen_lzc.sel_nodes [1] ? \gen_lzc.index_nodes [5:3] : \gen_lzc.index_nodes [8:6];
  assign \gen_lzc.index_nodes [5:3] = \gen_lzc.sel_nodes [3] ? \gen_lzc.index_nodes [11:9] : \gen_lzc.index_nodes [14:12];
  assign \gen_lzc.index_nodes [8:6] = in_i[4] ? 3'h4 : 3'h0;
  assign \gen_lzc.flip_vector.sv2v_autoblock_1.i  = 32'd5;
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 15'h4688;
  assign { \gen_lzc.index_nodes [20:15], \gen_lzc.index_nodes [2:0] } = { 6'h04, cnt_o };
  assign { \gen_lzc.sel_nodes [6:5], \gen_lzc.sel_nodes [2] } = { 1'h0, in_i[4], in_i[4] };
endmodule

module FPNewBlackbox(clk_i, rst_ni, operands_i, rnd_mode_i, op_i, op_mod_i, src_fmt_i, dst_fmt_i, int_fmt_i, vectorial_op_i, tag_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, tag_o, out_valid_o, out_ready_i, busy_o);
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  input [2:0] dst_fmt_i;
  wire [2:0] dst_fmt_i;
  input flush_i;
  wire flush_i;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [1:0] int_fmt_i;
  wire [1:0] int_fmt_i;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [383:0] operands_i;
  wire [383:0] operands_i;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  output [127:0] result_o;
  wire [127:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  input [2:0] src_fmt_i;
  wire [2:0] src_fmt_i;
  output [4:0] status_o;
  wire [4:0] status_o;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  input vectorial_op_i;
  wire vectorial_op_i;
  \$paramod$511dce93d93831b8dd0fec36634d8b20a0fa90c1\fpnew_top_21317_11D0A  inst (
    .busy_o(busy_o),
    .clk_i(clk_i),
    .dst_fmt_i(dst_fmt_i),
    .flush_i(flush_i),
    .in_ready_o(in_ready_o),
    .in_valid_i(in_valid_i),
    .int_fmt_i(int_fmt_i),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(operands_i),
    .out_ready_i(out_ready_i),
    .out_valid_o(out_valid_o),
    .result_o(result_o),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .src_fmt_i(src_fmt_i),
    .status_o(status_o),
    .tag_i(tag_i),
    .tag_o(tag_o),
    .vectorial_op_i(vectorial_op_i)
  );
endmodule
